USE [master]
GO
DROP DATABASE [aabc_ci_test]
GO

/****** Object:  Database [aabc_ci_test]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE DATABASE [aabc_ci_test]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'AABC-Dev', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS2014\MSSQL\DATA\aabc_ci_test.mdf' , SIZE = 219136KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
 LOG ON 
( NAME = N'AABC-Dev_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS2014\MSSQL\DATA\aabc_ci_test_log.ldf' , SIZE = 47616KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
GO
ALTER DATABASE [aabc_ci_test] SET COMPATIBILITY_LEVEL = 120
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [aabc_ci_test].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [aabc_ci_test] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [aabc_ci_test] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [aabc_ci_test] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [aabc_ci_test] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [aabc_ci_test] SET ARITHABORT OFF 
GO
ALTER DATABASE [aabc_ci_test] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [aabc_ci_test] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [aabc_ci_test] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [aabc_ci_test] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [aabc_ci_test] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [aabc_ci_test] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [aabc_ci_test] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [aabc_ci_test] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [aabc_ci_test] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [aabc_ci_test] SET  DISABLE_BROKER 
GO
ALTER DATABASE [aabc_ci_test] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [aabc_ci_test] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [aabc_ci_test] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [aabc_ci_test] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [aabc_ci_test] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [aabc_ci_test] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [aabc_ci_test] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [aabc_ci_test] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [aabc_ci_test] SET  MULTI_USER 
GO
ALTER DATABASE [aabc_ci_test] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [aabc_ci_test] SET DB_CHAINING OFF 
GO
ALTER DATABASE [aabc_ci_test] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [aabc_ci_test] SET TARGET_RECOVERY_TIME = 0 SECONDS 
GO
ALTER DATABASE [aabc_ci_test] SET DELAYED_DURABILITY = DISABLED 
GO
USE [aabc_ci_test]
GO
/****** Object:  Schema [exports]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE SCHEMA [exports]
GO
/****** Object:  Schema [hoursEntry]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE SCHEMA [hoursEntry]
GO
/****** Object:  Schema [meta]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE SCHEMA [meta]
GO
/****** Object:  Schema [webreports]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE SCHEMA [webreports]
GO
/****** Object:  UserDefinedFunction [dbo].[FullMonthsSeparation]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  
-- ============================
-- Create a proc and supporting utils to return pivot of billable hours per range by case/month
-- ============================

CREATE FUNCTION [dbo].[FullMonthsSeparation] 
(
    @DateA DATETIME,
    @DateB DATETIME
)
RETURNS INT
AS
BEGIN
    DECLARE @Result INT

    DECLARE @DateX DATETIME
    DECLARE @DateY DATETIME

    IF(@DateA < @DateB)
    BEGIN
    	SET @DateX = @DateA
    	SET @DateY = @DateB
    END
    ELSE
    BEGIN
    	SET @DateX = @DateB
    	SET @DateY = @DateA
    END

    SET @Result = (
    				SELECT 
    				CASE 
    					WHEN DATEPART(DAY, @DateX) > DATEPART(DAY, @DateY)
    					THEN DATEDIFF(MONTH, @DateX, @DateY) - 1
    					ELSE DATEDIFF(MONTH, @DateX, @DateY)
    				END
    				)

    RETURN @Result
END


GO
/****** Object:  Table [dbo].[AuthCodes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuthCodes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CodeCode] [nvarchar](20) NOT NULL,
	[CodeDescription] [nvarchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[AuthMatchRules]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AuthMatchRules](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[InsuranceID] [int] NOT NULL,
	[ProviderTypeID] [int] NOT NULL,
	[ServiceID] [int] NOT NULL,
	[RuleBillingMethod] [int] NOT NULL,
	[RuleInitialAuthID] [int] NULL,
	[RuleInitialMinimumMinutes] [int] NULL,
	[RuleInitialUnitSize] [int] NULL,
	[RuleFinalAuthID] [int] NULL,
	[RuleFinalMinimumMinutes] [int] NULL,
	[RuleFinalUnitSize] [int] NULL,
	[RuleAllowOverlapping] [bit] NOT NULL,
	[RuleRequiresAuthorizedBCBA] [bit] NOT NULL,
	[RuleRequiresPreAuthorization] [bit] NOT NULL,
	[RuleEffectiveDate] [datetime2](7) NULL,
	[RuleDefectiveDate] [datetime2](7) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthClasses]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthClasses](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[AuthClassCode] [nvarchar](12) NOT NULL,
	[AuthClassName] [nvarchar](50) NOT NULL,
	[AuthClassDescription] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthCodeGeneralHours]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthCodeGeneralHours](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseAuthID] [int] NOT NULL,
	[HoursYear] [int] NOT NULL,
	[HoursMonth] [int] NOT NULL,
	[HoursApplied] [decimal](6, 2) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthCodes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthCodes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseID] [int] NOT NULL,
	[AuthCodeID] [int] NOT NULL,
	[AuthClassID] [int] NOT NULL,
	[AuthStartDate] [datetime2](7) NOT NULL,
	[AuthEndDate] [datetime2](7) NOT NULL,
	[AuthTotalHoursApproved] [decimal](6, 2) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthHours]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthHours](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseAuthID] [int] NULL,
	[CaseProviderID] [int] NOT NULL,
	[HoursDate] [date] NOT NULL,
	[HoursTimeIn] [time](7) NOT NULL,
	[HoursTimeOut] [time](7) NOT NULL,
	[HoursTotal] [decimal](6, 2) NOT NULL,
	[HoursServiceID] [int] NULL,
	[HoursNotes] [nvarchar](max) NULL,
	[CaseID] [int] NULL,
	[HoursStatus] [int] NOT NULL,
	[HoursBillable] [decimal](6, 2) NULL,
	[HoursPayable] [decimal](6, 2) NULL,
	[HoursBillingRef] [nvarchar](30) NULL,
	[HoursPayableRef] [nvarchar](30) NULL,
	[HoursHasCatalystData] [bit] NOT NULL,
	[HoursWatchEnabled] [bit] NOT NULL,
	[HoursWatchNote] [nvarchar](255) NULL,
	[HoursSSGParentID] [int] NULL,
	[HoursCorrelationID] [int] NULL,
	[HoursInternalNotes] [nvarchar](255) NULL,
	[IsPayrollOrBillingAdjustment] [bit] NOT NULL,
	[ServiceLocationID] [int] NULL,
	[ParentApprovalID] [int] NULL,
	[ParentReported] [bit] NOT NULL,
	[HoursTrainingEntry] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthHoursBreakdown]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthHoursBreakdown](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[HoursID] [int] NOT NULL,
	[CaseAuthID] [int] NOT NULL,
	[Minutes] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthHoursNotes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthHoursNotes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[HoursID] [int] NOT NULL,
	[NotesTemplateID] [int] NOT NULL,
	[NotesAnswer] [nvarchar](2000) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthHoursReportLog]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthHoursReportLog](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[LogLoginID] [int] NOT NULL,
	[LogHoursID] [int] NOT NULL,
	[LogMessage] [nvarchar](max) NULL,
	[LogResolutionNote] [nvarchar](max) NULL,
	[IsResolved] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseAuthHoursStatuses]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseAuthHoursStatuses](
	[ID] [int] NOT NULL,
	[StatusCode] [nvarchar](5) NOT NULL,
	[StatusName] [nvarchar](10) NOT NULL,
	[StatusDescription] [nvarchar](35) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseBillingCorrespondences]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseBillingCorrespondences](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseId] [int] NOT NULL,
	[CorrespondenceDate] [datetime] NOT NULL,
	[CorrespondenceTypeId] [int] NOT NULL,
	[ContactPerson] [nvarchar](50) NULL,
	[StaffId] [int] NOT NULL,
	[Notes] [nvarchar](2000) NULL,
	[AttachmentFilename] [nvarchar](200) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseBillingCorrespondenceTypes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseBillingCorrespondenceTypes](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_CaseBillingCorrespondenceTypes] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseBillingReports]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseBillingReports](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ReportBaseID] [int] NOT NULL,
	[ReportPeriodID] [int] NOT NULL,
	[ReportID] [nvarchar](30) NOT NULL,
	[ReportGeneratedByUserID] [int] NULL,
	[ReportGenerationDate] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseInsurancePayments]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseInsurancePayments](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseInsuranceId] [int] NOT NULL,
	[Amount] [money] NOT NULL,
	[PaymentDate] [datetime] NOT NULL,
	[Description] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseInsurances]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseInsurances](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseID] [int] NOT NULL,
	[InsuranceID] [int] NOT NULL,
	[MemberID] [nvarchar](50) NULL,
	[MemberName] [nvarchar](50) NULL,
	[PrimaryCardholderName] [nvarchar](50) NULL,
	[PrimaryCardholderDOB] [datetime] NULL,
	[DatePlanEffective] [datetime] NULL,
	[DatePlanTerminated] [datetime] NULL,
	[FundingType] [nvarchar](20) NULL,
	[BenefitType] [nvarchar](20) NULL,
	[CoPayAmount] [money] NULL,
	[CoInsuranceAmount] [money] NULL,
	[DeductibleTotal] [money] NULL,
	[OtherNotes] [nvarchar](max) NULL,
	[HardshipWaiverLike] [bit] NOT NULL,
	[HardshipWaiverApplied] [bit] NOT NULL,
	[HardshipWaiverApproved] [bit] NOT NULL,
	[PaymentPlanLikeToDiscuss] [bit] NOT NULL,
	[PaymentPlanStartDate] [datetime] NULL,
	[PaymentPlanMonthlyAmount] [money] NULL,
	[PaymentPlanMethodOfPayment] [nvarchar](20) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseInsurancesMaxOutOfPocket]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseInsurancesMaxOutOfPocket](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseInsuranceId] [int] NOT NULL,
	[MaxOutOfPocket] [money] NULL,
	[EffectiveDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseMonthlyPeriodParentApprovals]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseMonthlyPeriodParentApprovals](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[MonthlyPeriodID] [int] NOT NULL,
	[PatientPortalLoginID] [int] NOT NULL,
	[ApprovalDate] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseMonthlyPeriodProviderFinalizations]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseMonthlyPeriodProviderFinalizations](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseMonthlyPeriodID] [int] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[DateFinalized] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseMonthlyPeriods]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseMonthlyPeriods](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseID] [int] NOT NULL,
	[PeriodFirstDayOfMonth] [datetime2](7) NOT NULL,
	[WatchComment] [nvarchar](500) NULL,
	[WatchIgnore] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseNotes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseNotes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[CaseID] [int] NOT NULL,
	[CorrespondenceName] [nvarchar](255) NULL,
	[Comments] [nvarchar](2000) NULL,
	[CorrespondenceType] [int] NULL,
	[EntryDate] [datetime2](7) NULL,
	[EnteredByUserID] [int] NULL,
	[RequiresFollowup] [bit] NOT NULL,
	[FollowupDate] [datetime2](7) NULL,
	[FollowupComplete] [bit] NOT NULL,
	[FollowupCompleteDate] [datetime2](7) NULL,
	[FollowupUserID] [int] NULL,
	[FollowupComment] [nvarchar](2000) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseNoteTasks]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseNoteTasks](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[NoteID] [int] NOT NULL,
	[Description] [nvarchar](255) NULL,
	[DueDate] [datetime2](7) NULL,
	[AssignedTo] [int] NULL,
	[Completed] [bit] NOT NULL,
	[CompletedBy] [int] NULL,
	[CompletedDate] [datetime2](7) NULL,
	[CompletedRemarks] [nvarchar](2000) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CasePayableReports]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CasePayableReports](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ReportBaseID] [int] NOT NULL,
	[ReportID] [nvarchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CasePaymentPlans]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CasePaymentPlans](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseId] [int] NOT NULL,
	[Active] [bit] NOT NULL,
	[Amount] [money] NOT NULL,
	[Frequency] [nvarchar](20) NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NOT NULL,
 CONSTRAINT [PK_CasePaymentPlans] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseProviderAppointments]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseProviderAppointments](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[CaseId] [int] NOT NULL,
	[ProviderId] [int] NOT NULL,
	[Type] [int] NOT NULL,
	[Date] [datetime] NOT NULL,
	[StartTime] [time](7) NOT NULL,
	[EndTime] [time](7) NOT NULL,
	[RecurringAppointmentId] [int] NULL,
 CONSTRAINT [PK_CaseProviderAppointments] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseProviderNotes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseProviderNotes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseProviderID] [int] NOT NULL,
	[ProviderNoteDate] [datetime2](7) NOT NULL,
	[ProviderNote] [nvarchar](max) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseProviders]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseProviders](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseID] [int] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[Active] [bit] NOT NULL,
	[IsSupervisor] [bit] NOT NULL,
	[IsAssessor] [bit] NOT NULL,
	[IsInsuranceAuthorizedBCBA] [bit] NOT NULL,
	[ActiveStartDate] [datetime2](7) NULL,
	[ActiveEndDate] [datetime2](7) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Cases]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Cases](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[PatientID] [int] NOT NULL,
	[CaseGeneratingReferralID] [int] NULL,
	[CaseStatus] [int] NOT NULL,
	[CaseStatusNotes] [nvarchar](2000) NULL,
	[CaseStartDate] [datetime2](7) NULL,
	[CaseAssignedStaffID] [int] NULL,
	[CaseRequiredHoursNotes] [nvarchar](1000) NULL,
	[CaseRequiredServicesNotes] [nvarchar](1000) NULL,
	[CaseHasPrescription] [bit] NOT NULL,
	[CaseHasAssessment] [bit] NOT NULL,
	[CaseHasIntake] [bit] NOT NULL,
	[CaseStatusReason] [int] NOT NULL,
	[CaseDischargeNotes] [nvarchar](1000) NULL,
	[DefaultServiceLocationID] [int] NULL,
	[CaseNeedsStaffing] [bit] NOT NULL,
	[CaseNeedsRestaffing] [bit] NOT NULL,
	[CaseRestaffingReason] [nvarchar](255) NULL,
	[CaseRestaffReasonID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseStatuses]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseStatuses](
	[ID] [int] NOT NULL,
	[Status] [nvarchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseStatusReasons]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseStatusReasons](
	[ID] [int] NOT NULL,
	[StatusReason] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CaseTasks]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaseTasks](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[CaseID] [int] NOT NULL,
	[TaskEnteredOn] [datetime2](7) NOT NULL,
	[TaskDescription] [nvarchar](255) NOT NULL,
	[TaskComplete] [bit] NOT NULL,
	[TaskCompletedDate] [datetime2](7) NULL,
	[TaskCompletedByStaffID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[CreditCards]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CreditCards](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoginId] [int] NOT NULL,
	[CardType] [nvarchar](50) NULL,
	[Cardholder] [nvarchar](50) NOT NULL,
	[CardNumber] [nvarchar](50) NOT NULL,
	[ExpiryMonth] [int] NOT NULL,
	[ExpiryYear] [int] NOT NULL,
	[GatewayType] [nvarchar](50) NULL,
	[GatewayCardId] [nvarchar](50) NULL,
 CONSTRAINT [PK_CreditCards] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[GuardianRelationships]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GuardianRelationships](
	[ID] [int] NOT NULL,
	[RelationshipName] [nvarchar](30) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[HoursNoteTemplateGroups]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HoursNoteTemplateGroups](
	[ID] [int] NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[GroupName] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[HoursNoteTemplates]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HoursNoteTemplates](
	[ID] [int] NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[TemplateGroupID] [int] NOT NULL,
	[TemplateProviderTypeID] [int] NULL,
	[TemplateServiceTypeID] [int] NULL,
	[TemplateText] [nvarchar](255) NOT NULL,
	[TemplateTextDescription] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Insurances]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Insurances](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[InsuranceName] [nvarchar](128) NOT NULL,
	[RequireCredentialsForBCBA] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ISO639_2_Lang]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ISO639_2_Lang](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ISO_639_2_Bibliographic] [nvarchar](50) NULL,
	[ISO_639_2_Terminology] [nvarchar](50) NULL,
	[ISO_639_1] [nvarchar](50) NULL,
	[EnglishName] [nvarchar](50) NULL,
	[FrenchName] [nvarchar](50) NULL,
	[Active] [bit] NOT NULL,
 CONSTRAINT [PK_ISO639_2_Lang] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Languages]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Languages](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[LangIsActive] [bit] NOT NULL,
	[LangBiblioCode] [nvarchar](3) NOT NULL,
	[LangTermCode] [nvarchar](3) NULL,
	[LangCommonCode] [nvarchar](2) NULL,
	[LangEnglishName] [nvarchar](255) NOT NULL,
	[LangFrenchName] [nvarchar](255) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[LanguageStrengthTypes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LanguageStrengthTypes](
	[ID] [int] NOT NULL,
	[TypeDescription] [nvarchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Numbers]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Numbers](
	[Number] [int] IDENTITY(1,1) NOT NULL,
 CONSTRAINT [PK_Numbers] PRIMARY KEY CLUSTERED 
(
	[Number] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalAcceptedTerms]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalAcceptedTerms](
	[LoginId] [int] NOT NULL,
	[TermsId] [int] NOT NULL,
	[Created] [datetime] NOT NULL,
 CONSTRAINT [PK_dboPatientPortalAcceptedTerms] PRIMARY KEY CLUSTERED 
(
	[LoginId] ASC,
	[TermsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalLoginPatients]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalLoginPatients](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[LoginID] [int] NOT NULL,
	[PatientID] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalLogins]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalLogins](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[LoginEmail] [nvarchar](128) NOT NULL,
	[LoginFirstName] [nvarchar](128) NOT NULL,
	[LoginLastName] [nvarchar](128) NOT NULL,
	[LoginPassword] [nvarchar](255) NOT NULL,
	[Active] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalLoginSignatures]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalLoginSignatures](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[LoginID] [int] NOT NULL,
	[SignatureData] [nvarchar](max) NULL,
	[SignatureDate] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalSignIns]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalSignIns](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[SignInDate] [datetime] NOT NULL,
	[SignInType] [nvarchar](20) NOT NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalTerms]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalTerms](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[Text] [nvarchar](max) NULL,
	[Active] [bit] NOT NULL,
	[Created] [datetime] NOT NULL,
 CONSTRAINT [PK_dboPatientPortalTerms] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PatientPortalWebMembership]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PatientPortalWebMembership](
	[ID] [int] NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[MemberPassword] [nvarchar](500) NOT NULL,
	[MemberPasswordQuestion] [nvarchar](500) NULL,
	[MemberPasswordAnswer] [nvarchar](128) NULL,
	[MemberIsApproved] [bit] NOT NULL,
	[MemberLastActivityDateUTC] [datetime2](7) NOT NULL,
	[MemberLastLoginDateUTC] [datetime2](7) NOT NULL,
	[MemberLastPasswordChangedDateUTC] [datetime2](7) NOT NULL,
	[MemberCreationDateUTC] [datetime2](7) NOT NULL,
	[MemberIsLockedOut] [bit] NOT NULL,
	[MemberLastLockoutDateUTC] [datetime2](7) NOT NULL,
	[MemberFailedPasswordAttemptCount] [int] NOT NULL,
	[MemberFailedPasswordWindowStartUTC] [datetime2](7) NOT NULL,
	[MemberFailedPasswordAnswerAttemptCount] [int] NOT NULL,
	[MemberFailedPasswordAnswerAttemptWindowStartUTC] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Patients]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Patients](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[PatientGeneratingReferralID] [int] NULL,
	[PatientFirstName] [nvarchar](64) NOT NULL,
	[PatientLastName] [nvarchar](64) NOT NULL,
	[PatientDateOfBirth] [date] NULL,
	[PatientGender] [nvarchar](5) NULL,
	[PatientPrimarySpokenLangauge] [nvarchar](64) NULL,
	[PatientGuardianFirstName] [nvarchar](64) NULL,
	[PatientGuardianLastName] [nvarchar](64) NULL,
	[PatientGuardianRelationship] [nvarchar](64) NULL,
	[PatientEmail] [nvarchar](128) NULL,
	[PatientPhone] [nvarchar](30) NULL,
	[PatientAddress1] [nvarchar](255) NULL,
	[PatientAddress2] [nvarchar](255) NULL,
	[PatientCity] [nvarchar](255) NULL,
	[PatientState] [nvarchar](2) NULL,
	[PatientZip] [nvarchar](20) NULL,
	[PatientInsuranceCompanyName] [nvarchar](255) NULL,
	[PatientInsuranceMemberID] [nvarchar](64) NULL,
	[PatientInsurancePrimaryCardholderDateOfBirth] [date] NULL,
	[PatientInsuranceCompanyProviderPhone] [nvarchar](30) NULL,
	[PatientPhone2] [nvarchar](30) NULL,
	[PatientPrimarySpokenLanguageID] [int] NULL,
	[PatientGuardianRelationshipID] [int] NULL,
	[PatientGuardianEmail] [nvarchar](64) NULL,
	[PatientGuardianCellPhone] [nvarchar](30) NULL,
	[PatientGuardianHomePhone] [nvarchar](30) NULL,
	[PatientGuardianWorkPhone] [nvarchar](30) NULL,
	[PatientGuardianNotes] [nvarchar](1000) NULL,
	[PatientGuardian2FirstName] [nvarchar](64) NULL,
	[PatientGuardian2LastName] [nvarchar](64) NULL,
	[PatientGuardian2RelationshipID] [int] NULL,
	[PatientGuardian2Email] [nvarchar](64) NULL,
	[PatientGuardian2CellPhone] [nvarchar](30) NULL,
	[PatientGuardian2HomePhone] [nvarchar](30) NULL,
	[PatientGuardian2WorkPhone] [nvarchar](30) NULL,
	[PatientGuardian2Notes] [nvarchar](1000) NULL,
	[PatientGuardian3FirstName] [nvarchar](64) NULL,
	[PatientGuardian3LastName] [nvarchar](64) NULL,
	[PatientGuardian3RelationshipID] [int] NULL,
	[PatientGuardian3Email] [nvarchar](64) NULL,
	[PatientGuardian3CellPhone] [nvarchar](30) NULL,
	[PatientGuardian3HomePhone] [nvarchar](30) NULL,
	[PatientGuardian3WorkPhone] [nvarchar](30) NULL,
	[PatientGuardian3Notes] [nvarchar](1000) NULL,
	[PatientNotes] [nvarchar](2000) NULL,
	[PatientInsuranceID] [int] NULL,
	[PatientPhysicianName] [nvarchar](128) NULL,
	[PatientPhysicianAddress] [nvarchar](128) NULL,
	[PatientPhysicianPhone] [nvarchar](50) NULL,
	[PatientPhysicianFax] [nvarchar](50) NULL,
	[PatientPhysicianEmail] [nvarchar](128) NULL,
	[PatientPhysicianContact] [nvarchar](128) NULL,
	[PatientPhysicianNotes] [nvarchar](2000) NULL,
	[PrescriptionFileName] [nvarchar](100) NULL,
	[PrescriptionLocation] [varchar](50) NULL,
	[HighRisk] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PaymentCharges]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PaymentCharges](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoginId] [int] NOT NULL,
	[PaymentId] [int] NOT NULL,
	[ReferenceType] [nvarchar](50) NOT NULL,
	[ReferenceId] [int] NOT NULL,
	[CreditCardId] [int] NULL,
	[ChargeDate] [datetime] NOT NULL,
	[GatewayChargeId] [nvarchar](50) NOT NULL,
	[Amount] [money] NOT NULL,
	[Description] [nvarchar](100) NULL,
 CONSTRAINT [PK_PaymentCharges] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Payments]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Payments](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[LoginId] [int] NOT NULL,
	[PaymentType] [nvarchar](20) NOT NULL,
	[RecurringFrequency] [nvarchar](20) NOT NULL,
	[PatientId] [int] NOT NULL,
	[Amount] [money] NOT NULL,
	[OneTimePaymentDate] [datetime] NULL,
	[RecurringDateStart] [datetime] NULL,
	[RecurringDateEnd] [datetime] NULL,
	[Active] [bit] NOT NULL,
	[CreditCardId] [int] NULL,
 CONSTRAINT [PK__Payments__3214EC071247577C] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[PaymentSchedules]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PaymentSchedules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PaymentId] [int] NOT NULL,
	[ScheduleNumber] [int] NOT NULL,
	[ScheduledDate] [date] NOT NULL,
	[PaymentChargeId] [int] NULL,
 CONSTRAINT [PK_PaymentSchedules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderCaseRates]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderCaseRates](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[CaseID] [int] NOT NULL,
	[HourlyRate] [money] NOT NULL,
	[EffectiveDate] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderInsuranceBlacklist]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderInsuranceBlacklist](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[InsuranceID] [int] NOT NULL,
	[BlacklistReason] [nvarchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderInsuranceCredentials]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderInsuranceCredentials](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ProviderId] [int] NOT NULL,
	[InsuranceId] [int] NOT NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
 CONSTRAINT [PK_ProviderInsuranceCredentials] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderLanguages]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderLanguages](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[LanguageStrength] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderPortalUsers]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderPortalUsers](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[AspNetUserID] [int] NULL,
	[ProviderID] [int] NULL,
	[ProviderUserNumber] [nvarchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderRates]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderRates](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[RateType] [int] NOT NULL,
	[Rate] [money] NOT NULL,
	[EffectiveDate] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Providers]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Providers](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderType] [int] NULL,
	[ProviderFirstName] [nvarchar](64) NOT NULL,
	[ProviderLastName] [nvarchar](64) NOT NULL,
	[ProviderCompanyName] [nvarchar](255) NULL,
	[ProviderPrimaryPhone] [nvarchar](20) NULL,
	[ProviderPrimaryEmail] [nvarchar](64) NULL,
	[ProviderAddress1] [nvarchar](255) NULL,
	[ProviderAddress2] [nvarchar](255) NULL,
	[ProviderCity] [nvarchar](255) NULL,
	[ProviderState] [nvarchar](2) NULL,
	[ProviderZip] [nvarchar](20) NULL,
	[ProviderNPI] [nvarchar](30) NULL,
	[ProviderRate] [decimal](6, 2) NULL,
	[ProviderPhone2] [nvarchar](30) NULL,
	[ProviderFax] [nvarchar](30) NULL,
	[ProviderNotes] [nvarchar](1000) NULL,
	[ProviderAvailability] [nvarchar](256) NULL,
	[ProviderHasBackgroundCheck] [bit] NOT NULL,
	[ProviderHasReferences] [bit] NOT NULL,
	[ProviderHasResume] [bit] NOT NULL,
	[ProviderCanCall] [bit] NOT NULL,
	[ProviderCanReachByPhone] [bit] NOT NULL,
	[ProviderCanEmail] [bit] NOT NULL,
	[ProviderDocumentStatus] [nvarchar](500) NULL,
	[ProviderLBA] [nvarchar](50) NULL,
	[ProviderCertificationID] [nvarchar](50) NULL,
	[ProviderCertificationState] [nvarchar](20) NULL,
	[ProviderCertificationRenewalDate] [datetime2](7) NULL,
	[ProviderW9Date] [datetime2](7) NULL,
	[ProviderCAQH] [nvarchar](50) NULL,
	[ProviderNumber] [nvarchar](30) NULL,
	[ProviderActive] [bit] NOT NULL,
	[ProviderIsHired] [bit] NOT NULL,
	[ResumeFileName] [nvarchar](100) NULL,
	[ResumeLocation] [varchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderServiceRates]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderServiceRates](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[ServiceID] [int] NOT NULL,
	[HourlyRate] [money] NOT NULL,
	[EffectiveDate] [datetime2](7) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderServiceZipCodes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderServiceZipCodes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderID] [int] NOT NULL,
	[ZipCode] [nvarchar](5) NOT NULL,
	[IsPrimary] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderTypes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderTypes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderTypeCode] [nvarchar](32) NOT NULL,
	[ProviderTypeName] [nvarchar](255) NULL,
	[ProviderTypeIsOutsourced] [bit] NOT NULL,
	[ProviderTypeCanSuperviseCase] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ProviderTypeServices]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProviderTypeServices](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ProviderTypeID] [int] NOT NULL,
	[ServiceID] [int] NOT NULL,
	[AssociatedAuthClassID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralChecklist]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralChecklist](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ReferralID] [int] NOT NULL,
	[ChecklistItemID] [int] NOT NULL,
	[ItemIsComplete] [bit] NOT NULL,
	[ItemCompletedByStaffID] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralChecklistItems]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralChecklistItems](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ItemDescription] [nvarchar](255) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralDismissalReasons]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralDismissalReasons](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ReasonCode] [nvarchar](10) NOT NULL,
	[ReasonName] [nvarchar](255) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralEmails]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralEmails](
	[MessageID] [varchar](250) NOT NULL,
	[MessageSubject] [nvarchar](250) NULL,
	[MessageStatus] [varchar](50) NULL,
	[ProcessedTime] [datetime2](7) NULL,
PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Referrals]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Referrals](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ReferralFirstName] [nvarchar](64) NOT NULL,
	[ReferralLastName] [nvarchar](64) NOT NULL,
	[ReferralDateOfBirth] [date] NULL,
	[ReferralGender] [nvarchar](5) NULL,
	[ReferralPrimarySpokenLangauge] [nvarchar](64) NULL,
	[ReferralGuardianFirstName] [nvarchar](64) NULL,
	[ReferralGuardianLastName] [nvarchar](64) NULL,
	[ReferralGuardianRelationship] [nvarchar](64) NULL,
	[ReferralEmail] [nvarchar](128) NULL,
	[ReferralPhone] [nvarchar](40) NULL,
	[ReferralAddress1] [nvarchar](255) NULL,
	[ReferralAddress2] [nvarchar](255) NULL,
	[ReferralCity] [nvarchar](255) NULL,
	[ReferralState] [nvarchar](50) NULL,
	[ReferralZip] [nvarchar](20) NULL,
	[ReferralAreaOfConcern] [nvarchar](1000) NULL,
	[ReferralInsuranceCompanyName] [nvarchar](255) NULL,
	[ReferralInsuranceMemberID] [nvarchar](64) NULL,
	[ReferralInsurancePrimaryCardholderDateOfBirth] [date] NULL,
	[ReferralInsuranceCompanyProviderPhone] [nvarchar](30) NULL,
	[ReferralSourceType] [int] NULL,
	[ReferralSourceName] [nvarchar](255) NULL,
	[ReferralReferrerNotes] [nvarchar](2000) NULL,
	[ReferralStatus] [int] NOT NULL,
	[ReferralDismissalReasonID] [int] NULL,
	[ReferralDismissalReason] [nvarchar](128) NULL,
	[ReferralDismissalReasonNotes] [nvarchar](2000) NULL,
	[ReferralEnteredByStaffID] [int] NULL,
	[ReferralFollowup] [bit] NOT NULL,
	[ReferralFollowupDate] [date] NULL,
	[ReferralAssignedStaffID] [int] NULL,
	[ReferralGeneratedCaseID] [int] NULL,
	[ReferralGeneratedPatientID] [int] NULL,
	[ReferralServicesRequested] [nvarchar](75) NULL,
	[ReferralPrimaryCardholderName] [nvarchar](128) NULL,
	[ReferralPrimarySpokenLanguageID] [int] NULL,
	[ReferralStatusNotes] [nvarchar](2000) NULL,
	[ReferralActive] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralSettings]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralSettings](
	[ID] [int] NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[SettingName] [nvarchar](64) NOT NULL,
	[SettingDescription] [nvarchar](1000) NULL,
	[SettingValue] [nvarchar](2000) NULL,
	[SettingValueType] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralSourceTypes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralSourceTypes](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[TypeName] [nvarchar](64) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ReferralStatuses]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ReferralStatuses](
	[ID] [int] NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[StatusCode] [nvarchar](5) NOT NULL,
	[StatusName] [nvarchar](64) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ServiceLocations]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ServiceLocations](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[LocationName] [nvarchar](255) NOT NULL,
	[LocationMBHID] [int] NULL,
	[Active] [bit] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Services]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Services](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[ServiceCode] [nvarchar](10) NOT NULL,
	[ServiceName] [nvarchar](50) NOT NULL,
	[ServiceDescription] [nvarchar](500) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[SettingValueTypes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SettingValueTypes](
	[ID] [int] NOT NULL,
	[TypeName] [nvarchar](30) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[SMTPAccounts]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SMTPAccounts](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[AccountName] [nvarchar](50) NOT NULL,
	[AccountDisplayName] [nvarchar](50) NULL,
	[AccountUsername] [nvarchar](50) NOT NULL,
	[AccountPassword] [nvarchar](50) NOT NULL,
	[AccountServer] [nvarchar](50) NOT NULL,
	[AccountPort] [smallint] NULL,
	[AccountUseSSL] [bit] NULL,
	[AccountAuthMode] [smallint] NULL,
	[AccountDefaultFromAddress] [nvarchar](50) NULL,
	[AccountDefaultReplyAddress] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Source]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Source](
	[PatientName] [nvarchar](255) NULL,
	[InsuranceName] [nvarchar](255) NULL,
	[SubscriberID] [nvarchar](255) NULL,
	[EligibilityStatus] [nvarchar](255) NULL,
	[SourceDate] [datetime2](7) NULL,
	[rv] [timestamp] NOT NULL,
	[Active] [bit] NOT NULL,
	[EventDateString] [nvarchar](50) NULL,
	[EventDate] [datetime2](7) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[Staff]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Staff](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[StaffActive] [bit] NOT NULL,
	[StaffFirstName] [nvarchar](64) NOT NULL,
	[StaffLastName] [nvarchar](64) NOT NULL,
	[StaffPrimaryPhone] [nvarchar](30) NULL,
	[StaffPrimaryEmail] [nvarchar](128) NULL,
	[StaffHireDate] [date] NULL,
	[StaffTerminatedDate] [date] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[TransactionLog]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TransactionLog](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[Date] [smalldatetime] NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Phone] [varchar](50) NOT NULL,
	[Email] [varchar](200) NOT NULL,
	[TransactionId] [varchar](50) NULL,
 CONSTRAINT [PK_TransactionLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebOptionGroups]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebOptionGroups](
	[ID] [int] NOT NULL,
	[WebOptionDescription] [nvarchar](max) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebOptions]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebOptions](
	[ID] [int] NOT NULL,
	[WebOptionGroupID] [int] NULL,
	[WebOptionDescription] [nvarchar](max) NULL,
	[WebOptionName] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebPermissionGroups]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebPermissionGroups](
	[ID] [int] NOT NULL,
	[WebGroupDescription] [nvarchar](max) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebPermissions]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebPermissions](
	[ID] [int] NOT NULL,
	[WebPermissionGroupID] [int] NULL,
	[WebPermissionDescription] [nvarchar](max) NULL,
	[WebPermissionName] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebUserOptions]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebUserOptions](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[WebUserID] [int] NOT NULL,
	[WebOptionID] [int] NULL,
	[WebOptionValue] [nvarchar](max) NULL,
	[isAllowed] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebUserPermissions]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebUserPermissions](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[WebUserID] [int] NOT NULL,
	[WebPermissionID] [int] NOT NULL,
	[isAllowed] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[WebUsers]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebUsers](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[AspNetUserID] [int] NOT NULL,
	[StaffID] [int] NULL,
	[UserName] [nvarchar](128) NOT NULL,
	[WebUserFirstName] [nvarchar](64) NOT NULL,
	[WebUserLastName] [nvarchar](64) NOT NULL,
	[WebUserEmail] [nvarchar](128) NOT NULL,
	[isActive] [bit] NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[ZipCodes]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ZipCodes](
	[ZipCode] [nvarchar](5) NOT NULL,
	[ZipCity] [nvarchar](64) NULL,
	[ZipState] [nvarchar](2) NULL,
	[ZipType] [nvarchar](1) NULL,
	[ZipTimeZone] [int] NULL,
	[ZipDaylightSavings] [bit] NULL,
	[ZipLatitude] [decimal](20, 10) NULL,
	[ZipLongitude] [decimal](20, 10) NULL,
	[IsActive] [bit] NOT NULL,
	[ZipCounty] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[ZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [meta].[DatabaseSettings]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [meta].[DatabaseSettings](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime2](7) NOT NULL,
	[rv] [timestamp] NOT NULL,
	[SettingName] [nvarchar](128) NOT NULL,
	[SettingValue] [nvarchar](256) NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  View [hoursEntry].[EligibleProviders]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[EligibleProviders] AS
	SELECT 
		ProviderID 
	FROM dbo.ProviderPortalUsers;

GO
/****** Object:  View [hoursEntry].[EligibleCases]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[EligibleCases] AS
	SELECT 
		c.ID AS CaseID
	FROM dbo.CaseProviders AS cp
		INNER JOIN hoursEntry.EligibleProviders AS ep ON cp.ProviderID = ep.ProviderID
		INNER JOIN dbo.Cases AS c ON c.ID = cp.CaseID
	WHERE cp.Active = 1	-- provider active
		AND c.CaseStatus <> -1	-- not history/discharged
		AND (cp.ActiveStartDate IS NULL OR cp.ActiveStartDate <= GETDATE())	-- provider active by date
		AND (cp.ActiveEndDate IS NULL OR cp.ActiveEndDate >= GETDATE())	-- provider active by date
	GROUP BY c.ID

GO
/****** Object:  View [hoursEntry].[CasesWithActiveInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [hoursEntry].[CasesWithActiveInsurance] AS 
	SELECT 
		ec.CaseID
	FROM hoursEntry.EligibleCases AS ec
		INNER JOIN dbo.CaseInsurances AS ci ON ci.CaseID = ec.CaseID
	WHERE (ci.DatePlanEffective IS NULL OR ci.DatePlanEffective <= GETDATE())
		AND (ci.DatePlanTerminated IS NULL OR ci.DatePlanTerminated >= GETDATE())
	GROUP BY ec.CaseID


GO
/****** Object:  View [hoursEntry].[CasesWithoutActiveInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[CasesWithoutActiveInsurance] AS 
	SELECT ec.CaseID
	FROM hoursEntry.EligibleCases AS ec
		LEFT JOIN hoursEntry.CasesWithActiveInsurance AS cwi ON cwi.CaseID = ec.CaseID
	WHERE cwi.CaseID IS NULL
	GROUP BY ec.CaseID;

GO
/****** Object:  View [hoursEntry].[CasesWithActiveAuthorizations]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[CasesWithActiveAuthorizations] AS
	SELECT ec.CaseID
	FROM hoursEntry.EligibleCases AS ec
		INNER JOIN dbo.CaseAuthCodes AS cac ON ec.CaseID = cac.CaseID
	WHERE cac.AuthStartDate <= GETDATE()
		AND cac.AuthEndDate >= GETDATE()
	GROUP BY ec.CaseID

GO
/****** Object:  View [hoursEntry].[CasesWithoutActiveAuthorizations]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[CasesWithoutActiveAuthorizations] AS
	SELECT ec.CaseID
	FROM hoursEntry.EligibleCases AS ec
		LEFT JOIN hoursEntry.CasesWithActiveAuthorizations AS cwa ON ec.CaseID = cwa.CaseID
	WHERE cwa.CaseID IS NULL
	GROUP BY ec.CaseID;

GO
/****** Object:  View [hoursEntry].[EligibleInsurances]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[EligibleInsurances] AS 
	SELECT  ci.InsuranceID
	FROM hoursEntry.CasesWithActiveInsurance AS cwi
		INNER JOIN dbo.Cases AS c ON cwi.CaseID = c.ID
		INNER JOIN dbo.CaseInsurances AS ci ON c.ID = ci.CaseID
	WHERE
		(ci.DatePlanEffective IS NULL OR ci.DatePlanEffective <= GETDATE())
		AND (ci.DatePlanTerminated IS NULL OR ci.DatePlanTerminated >= GETDATE())
	GROUP BY ci.InsuranceID;

GO
/****** Object:  View [hoursEntry].[EligibleAuthorizations]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
CREATE VIEW [hoursEntry].[EligibleAuthorizations] AS 
	SELECT 
		cac.CaseID,
		cac.ID AS CaseAuthorizationID,
		ac.ID AS AuthCodeID,
		ac.CodeCode AS AuthCode
	FROM hoursEntry.CasesWithActiveAuthorizations AS cwi
		INNER JOIN dbo.CaseAuthCodes AS cac ON cwi.CaseID = cac.CaseID
		INNER JOIN dbo.AuthCodes AS ac ON ac.ID = cac.AuthCodeID
	WHERE
		cac.AuthStartDate <= GETDATE()
		AND cac.AuthEndDate >= GETDATE()
	GROUP BY 
		cac.CaseID, 
		cac.ID,
		ac.ID,
		ac.CodeCode;

GO
/****** Object:  View [hoursEntry].[AuthorizationsWithoutRules]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [hoursEntry].[AuthorizationsWithoutRules] AS
	SELECT 
		ea.CaseID,
		ea.CaseAuthorizationID,
		ea.AuthCodeID,
		ea.AuthCode
	
	FROM hoursEntry.EligibleAuthorizations AS ea
		INNER JOIN dbo.Cases AS c ON c.ID = ea.CaseID
		INNER JOIN dbo.CaseInsurances AS ci ON ci.CaseID = c.ID
		LEFT JOIN dbo.AuthMatchRules AS mr ON 
			mr.InsuranceID = ci.InsuranceID
			AND mr.RuleInitialAuthID = ea.AuthCodeID
		
	WHERE (ci.DatePlanEffective IS NULL OR ci.DatePlanEffective <= GETDATE())
		AND (ci.DatePlanTerminated IS NULL OR ci.DatePlanTerminated >= GETDATE())
		AND (mr.RuleEffectiveDate IS NULL OR mr.RuleEffectiveDate <= GETDATE())
		AND (mr.RuleDefectiveDate IS NULL OR mr.RuleDefectiveDate >= GETDATE())
		AND mr.ID IS NULL

	GROUP BY
		ea.CaseID,
		ea.CaseAuthorizationID,
		ea.AuthCodeID,
		ea.AuthCode;

GO
/****** Object:  View [dbo].[FailedHoursBreakdowns]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FailedHoursBreakdowns] AS

	SELECT  
		cah.ID AS HourID,
		cah.CaseID,
		cah.CaseProviderID AS ProviderID,
		cah.HoursDate,
		cah.HoursStatus,
		cah.HoursBillable,
		cah.HoursServiceID,
		p.PatientInsuranceID AS InsuranceID,
		s.ServiceCode,
		i.InsuranceName

	FROM dbo.CaseAuthHours AS cah
	LEFT JOIN dbo.CaseAuthHoursBreakdown AS cahb ON cah.ID = cahb.HoursID
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
	LEFT JOIN dbo.Services AS s ON s.ID = cah.HoursServiceID
	LEFT JOIN dbo.Insurances AS i ON i.ID = p.PatientInsuranceID

	WHERE cahb.ID IS NULL
		AND cah.HoursBillable > 0.25
		AND cah.HoursDate >= '2017-01-01'
	-- ORDER BY cah.HoursDate DESC
	;
	



GO
/****** Object:  View [dbo].[FailedHoursBreakdownsByInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[FailedHoursBreakdownsByInsurance] AS

	SELECT 
		COUNT(*) AS CountOfEntries, 
		x.InsuranceID,
		x.InsuranceName, 
		MIN(x.HoursDate) AS MinDate, 
		MAX(x.HoursDate) AS MaxDate
	FROM dbo.FailedHoursBreakdowns AS x
	GROUP BY x.InsuranceID, x.InsuranceName
	--ORDER BY COUNT(*) DESC
	;


GO
/****** Object:  View [dbo].[FailedHoursBreakdownsByInsuranceAndService]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
	
	
	
	
CREATE VIEW [dbo].[FailedHoursBreakdownsByInsuranceAndService] AS

	SELECT 
		COUNT(*) AS CountOfEntries, 
		x.InsuranceName, 		
		x.ServiceCode,
		MIN(x.HoursDate) AS MinDate, 
		MAX(x.HoursDate) AS MaxDate,
		x.InsuranceID,
		x.HoursServiceID
	FROM dbo.FailedHoursBreakdowns AS x
	GROUP BY 
		x.InsuranceID, 
		x.InsuranceName, 
		x.HoursServiceID, 
		x.ServiceCode
	--ORDER BY x.InsuranceName, x.ServiceCode, COUNT(*) DESC
	;


GO
/****** Object:  View [dbo].[PatientsWithParentPortalSignatures]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	-- SELECT COUNT(DISTINCT PatientID) FROM dbo.PatientPortalLoginPatients;
	-- SELECT COUNT(DISTINCT LoginID) FROM dbo.PatientPortalLoginSignatures;
	

CREATE VIEW [dbo].[PatientsWithParentPortalSignatures] AS 
	SELECT 
		 p.ID AS PatientID,
		 p.PatientFirstName, 
		 p.PatientLastName
	FROM dbo.PatientPortalLoginSignatures AS s
	INNER JOIN dbo.PatientPortalLogins AS l ON s.LoginID = l.ID
	INNER JOIN dbo.PatientPortalLoginPatients AS ppp ON ppp.LoginID = l.ID
	INNER JOIN dbo.Patients AS p ON p.ID = ppp.PatientID
	GROUP BY p.ID, p.PatientFirstName, p.PatientLastName

GO
/****** Object:  View [dbo].[ActivePatientsWithoutParentPortalSignatures]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	-- SELECT COUNT(DISTINCT PatientID) FROM dbo.PatientPortalLoginPatients;
	-- SELECT COUNT(DISTINCT LoginID) FROM dbo.PatientPortalLoginSignatures;
	
/*
CREATE VIEW dbo.PatientsWithParentPortalSignatures AS 
	SELECT 
		 p.ID AS PatientID,
		 p.PatientFirstName, 
		 p.PatientLastName
	FROM dbo.PatientPortalLoginSignatures AS s
	INNER JOIN dbo.PatientPortalLogins AS l ON s.LoginID = l.ID
	INNER JOIN dbo.PatientPortalLoginPatients AS ppp ON ppp.LoginID = l.ID
	INNER JOIN dbo.Patients AS p ON p.ID = ppp.PatientID
	GROUP BY p.ID, p.PatientFirstName, p.PatientLastName
*/

CREATE VIEW [dbo].[ActivePatientsWithoutParentPortalSignatures] AS
	SELECT 
		p.ID, p.PatientFirstName, p.PatientLastName
	FROM dbo.Patients AS p
	INNER JOIN dbo.Cases AS c ON c.PatientID = p.ID
	LEFT JOIN dbo.PatientsWithParentPortalSignatures AS s ON s.PatientID = p.ID
	WHERE s.PatientID IS NULL
		AND c.CaseStatus > -1;

GO
/****** Object:  View [dbo].[ActiveRates]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================
-- Create a view that will get all active rates per hours entry
-- =============================

CREATE VIEW [dbo].[ActiveRates] AS

	SELECT 
		p.ID AS ProviderID,
		cah.ID AS HoursID,
		CASE 
			WHEN cr.HourlyRate IS NOT NULL THEN cr.HourlyRate
			WHEN sr.HourlyRate IS NOT NULL THEN sr.HourlyRate
			WHEN r.Rate IS NOT NULL THEN r.Rate
			WHEN p.ProviderRate IS NOT NULL THEN p.ProviderRate
			ELSE  NULL
		END AS AppliedRate,		
		CASE 
			WHEN cr.HourlyRate IS NOT NULL THEN 0
			WHEN sr.HourlyRate IS NOT NULL THEN 0
			WHEN r.Rate IS NOT NULL THEN r.RateType
			WHEN p.ProviderRate IS NOT NULL THEN 0
			ELSE NULL
		END AS RateType,
		CASE 
			WHEN cr.HourlyRate IS NOT NULL THEN 'CaseRate'
			WHEN sr.HourlyRate IS NOT NULL THEN 'ServiceRate'
			WHEN r.Rate IS NOT NULL THEN 'ProviderRates' 
			WHEN p.ProviderRate IS NOT NULL THEN 'LegacyRate'
			ELSE NULL 
		END AS RateSource

	FROM dbo.CaseAuthHours AS cah		
		INNER JOIN dbo.Providers AS p ON p.ID = cah.CaseProviderID
		OUTER APPLY ( -- case rates
			SELECT TOP 1 HourlyRate
			FROM dbo.ProviderCaseRates AS cr
			INNER JOIN dbo.Cases AS c ON c.ID = cr.CaseID
			WHERE cr.EffectiveDate <= cah.HoursDate
				AND cr.ProviderID = cah.CaseProviderID
			ORDER BY cr.EffectiveDate DESC
		) AS cr
		OUTER APPLY ( -- service rates
			SELECT TOP 1 HourlyRate
			FROM dbo.ProviderServiceRates AS sr
			WHERE sr.EffectiveDate <= cah.HoursDate
				AND sr.ProviderID = cah.CaseProviderID
			ORDER BY sr.EffectiveDate DESC
		) AS sr
		OUTER APPLY ( -- provider rates
			SELECT TOP 1 ID, Rate, RateType
			FROM dbo.ProviderRates AS pr
			WHERE pr.EffectiveDate <= cah.HoursDate
				AND pr.ProviderID = cah.CaseProviderID
			ORDER BY pr.EffectiveDate DESC
		) AS r;
		

GO
/****** Object:  View [dbo].[HoursProviderCost]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================
-- Update the dashboard query to include the new active rate
-- =============================
CREATE VIEW [dbo].[HoursProviderCost] AS
	SELECT
		pt.ID,
		cah.HoursDate,
		c.ID AS CaseID,
		pt.PatientInsuranceCompanyName,
		pt.PatientFirstName,
		pt.PatientLastName,
		pv.ProviderRate,
		cah.HoursTotal,
		ar.AppliedRate * cah.HoursPayable AS ProviderCost,
		pt.PatientInsuranceID
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Providers AS pv ON pv.ID = cah.CaseProviderID
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS pt ON pt.ID = c.PatientID
	INNER JOIN dbo.ActiveRates AS ar ON cah.ID = ar.HoursID;
	

GO
/****** Object:  View [dbo].[PatientCountByInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[PatientCountByInsurance] AS (
	SELECT i.ID, i.InsuranceName, p.PatientInsuranceID, COUNT(p.PatientInsuranceID) AS PatientsApplied
	FROM dbo.Insurances AS i
	LEFT JOIN dbo.Patients AS p ON i.ID = p.PatientInsuranceID
	-- WHERE p.PatientInsuranceID IS NULL
	GROUP BY i.ID, i.InsuranceName, p.PatientInsuranceID
);

GO
/****** Object:  View [dbo].[InsurancesAppliedWithoutAuthMatchRules]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[InsurancesAppliedWithoutAuthMatchRules] AS

	SELECT 
		i.ID AS InsuranceID, 
		i.InsuranceName 
		-- m.ID AS MatchRuleID,
		-- pc.PatientsApplied

	FROM dbo.Insurances AS i
	INNER JOIN dbo.PatientCountByInsurance AS pc ON pc.ID = i.ID
	LEFT JOIN dbo.AuthMatchRules AS m ON m.InsuranceID = i.ID
	

	WHERE m.ID IS NULL
		AND pc.PatientsApplied = 0;
GO
/****** Object:  UserDefinedFunction [dbo].[GetActiveCaseProviders]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ========================
-- Create an ActiveCaseProviders function
-- ========================
CREATE FUNCTION [dbo].[GetActiveCaseProviders] 
(	
	@StartDate DATETIME2,
	@EndDate DATETIME2
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT *
	FROM [CaseProviders]
	WHERE (
			(ActiveStartDate IS NULL OR ActiveStartDate <= @EndDate) AND 
			(ActiveEndDate IS NULL OR CaseProviders.ActiveEndDate >= @StartDate)
		)
)

GO
/****** Object:  View [dbo].[AllLanguages]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[AllLanguages] AS 
	SELECT
		l.ID,
		l.ISO_639_2_Bibliographic AS BiblioCode,
		l.ISO_639_2_Terminology AS TermCode,
		l.ISO_639_1 AS Code,
		l.EnglishName,
		l.FrenchName
	FROM dbo.ISO639_2_Lang AS l
	WHERE Active = 1
;

GO
/****** Object:  View [dbo].[AppliedAuthorizationAndInsuranceMismatches]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


/* ========================================
 Get a list of authorizations that have been
 applied to cases, but which don't have a
 corresponding authorization available in the
 insurance's auth match rules
=========================================== */
CREATE VIEW [dbo].[AppliedAuthorizationAndInsuranceMismatches] AS

	SELECT 
		TempKey = ROW_NUMBER() OVER (ORDER BY patientInfo.CaseID, patientInfo.AuthCodeID),
		patientInfo.*
		--, insuranceInfo.*
	FROM (

		-- patientInfo
		-- get all the cases and auths applied, as well as insurance info
		SELECT 
			p.PatientFirstName,
			p.PatientLastName,
			p.PatientInsuranceID,
			i.InsuranceName,
			c.ID AS CaseID,
			cac.ID AS CaseAuthCodeID,
			cac.AuthCodeID,
			cac.AuthStartDate, 
			cac.AuthEndDate,
			ac.CodeCode,
			ac.CodeDescription
		FROM dbo.Cases AS c
		INNER JOIN dbo.Patients AS p ON c.PatientID = p.ID
		INNER JOIN dbo.CaseAuthCodes AS cac ON c.ID = cac.CaseID
		INNER JOIN dbo.AuthCodes AS ac ON ac.ID = cac.AuthCodeID
		LEFT JOIN dbo.Insurances AS i ON p.PatientInsuranceID = i.ID

	) AS patientInfo

	LEFT JOIN (
	
		-- get a list of all insurances and their applicable auth codes
		SELECT 
			i.ID AS InsuranceID,
			i.InsuranceName,
			amr.RuleFinalAuthID AS AuthID
		FROM dbo.Insurances AS i
		INNER JOIN dbo.AuthMatchRules AS amr ON amr.InsuranceID = i.ID
		WHERE amr.RuleFinalAuthID IS NOT NULL

		UNION

		SELECT 
			i.ID AS InsuranceID,
			i.InsuranceName,
			amr.RuleInitialAuthID AS AuthID
		FROM dbo.Insurances AS i
		INNER JOIN dbo.AuthMatchRules AS amr ON amr.InsuranceID = i.ID
		WHERE amr.RuleInitialAuthID IS NOT NULL

	) AS insuranceInfo ON patientInfo.PatientInsuranceID = insuranceInfo.InsuranceID AND patientInfo.AuthCodeID = insuranceInfo.AuthID

	WHERE insuranceInfo.InsuranceID IS NULL

	-- ORDER BY patientInfo.PatientLastName, patientInfo.PatientFirstName, patientInfo.AuthStartDate
	;



GO
/****** Object:  View [dbo].[CommonLanguages]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[CommonLanguages] AS
	SELECT
		l.ID,
		l.ISO_639_1 AS Code,
		l.EnglishName AS Description
	FROM dbo.ISO639_2_Lang AS l
	WHERE Active = 1
		AND l.ISO_639_1 IS NOT NULL
;

GO
/****** Object:  View [dbo].[HoursBreakdownsFailurePercentageByMonth]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[HoursBreakdownsFailurePercentageByMonth] AS 
	SELECT 
		results.DateGroup,
		COUNT(*) AS TotalEntries,
		SUM(results.HasBreakdown) AS TotalWithBreakdown,
		COUNT(*) - SUM(results.HasBreakdown) AS TotalWithoutBreakdown,
		CAST(100 * ((CAST(COUNT(*) - SUM(results.HasBreakdown) AS DECIMAL(10,4))) / CAST(COUNT(*) AS DECIMAL(10,4))) AS INT) AS FailurePercentage
	FROM (
		SELECT
			DATEADD(MONTH, DATEDIFF(MONTH, 0, cah.HoursDate), 0) AS DateGroup,
			cah.ID,
			CASE WHEN b.HoursID IS NOT NULL THEN 1 ELSE 0 END AS HasBreakdown	
		FROM dbo.CaseAuthHours AS cah
		LEFT JOIN (		
			SELECT cahb.HoursID, COUNT(*) AS TotalCount
			FROM dbo.CaseAuthHoursBreakdown AS cahb
			GROUP BY cahb.HoursID
		) AS b ON cah.ID = b.HoursID
	--	WHERE cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
	) AS results
	GROUP BY results.DateGroup;
GO
/****** Object:  View [dbo].[HoursTotalsByPatientByMonth]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[HoursTotalsByPatientByMonth] AS
	SELECT 
		p.PatientFirstName,
		p.PatientLastName,
		YEAR(cah.HoursDate) AS HoursYear,
		MONTH(cah.HoursDate) AS HoursMonth,
		SUM(cah.HoursBillable) AS SumOfHoursBillable,
		SUM(cah.HoursPayable) AS SumOfHoursPayable,
		SUM(cah.HoursTotal) AS SumOfHoursTotal
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Cases AS c ON cah.CaseID = c.ID
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
	GROUP BY 
		p.PatientFirstName,
		p.PatientLastName,
		YEAR(cah.HoursDate),
		MONTH(cah.HoursDate)
	;

GO
/****** Object:  View [dbo].[HoursTotalsByPatientByProviderMonth]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[HoursTotalsByPatientByProviderMonth] AS
	SELECT 
		p.PatientFirstName,
		p.PatientLastName,
		pt.ProviderTypeCode AS ProviderType,
		pv.ProviderFirstName,
		pv.ProviderLastName,
		YEAR(cah.HoursDate) AS HoursYear,
		MONTH(cah.HoursDate) AS HoursMonth,
		SUM(cah.HoursBillable) AS SumOfHoursBillable,
		SUM(cah.HoursPayable) AS SumOfHoursPayable,
		SUM(cah.HoursTotal) AS SumOfHoursTotal
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Cases AS c ON cah.CaseID = c.ID
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
	INNER JOIN dbo.Providers AS pv ON cah.CaseProviderID = pv.ID
	INNER JOIN dbo.ProviderTypes AS pt ON pv.ProviderType = pt.ID
	GROUP BY 
		p.PatientFirstName,
		p.PatientLastName,
		pt.ProviderTypeCode,
		pv.ProviderFirstName,
		pv.ProviderLastName,
		YEAR(cah.HoursDate),
		MONTH(cah.HoursDate)
	;



GO
/****** Object:  View [dbo].[HoursTotalsByPatientByProviderTypeByMonth]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[HoursTotalsByPatientByProviderTypeByMonth] AS
	SELECT 
		p.PatientFirstName,
		p.PatientLastName,
		pt.ProviderTypeCode AS ProviderType,
		YEAR(cah.HoursDate) AS HoursYear,
		MONTH(cah.HoursDate) AS HoursMonth,
		SUM(cah.HoursBillable) AS SumOfHoursBillable,
		SUM(cah.HoursPayable) AS SumOfHoursPayable,
		SUM(cah.HoursTotal) AS SumOfHoursTotal
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Cases AS c ON cah.CaseID = c.ID
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
	INNER JOIN dbo.Providers AS pv ON cah.CaseProviderID = pv.ID
	INNER JOIN dbo.ProviderTypes AS pt ON pv.ProviderType = pt.ID
	GROUP BY 
		p.PatientFirstName,
		p.PatientLastName,
		pt.ProviderTypeCode,
		YEAR(cah.HoursDate),
		MONTH(cah.HoursDate)
	;


GO
/****** Object:  View [dbo].[HoursWithoutBreakdowns]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[HoursWithoutBreakdowns] AS

	SELECT  
		cah.ID AS HourID,
		cah.CaseID,
		cah.CaseProviderID AS ProviderID,
		cah.HoursDate,
		cah.HoursStatus,
		cah.HoursBillable,
		cah.HoursServiceID,
		p.PatientInsuranceID AS InsuranceID,
		s.ServiceCode,
		i.InsuranceName

	FROM dbo.CaseAuthHours AS cah
	LEFT JOIN dbo.CaseAuthHoursBreakdown AS cahb ON cah.ID = cahb.ID
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
	LEFT JOIN dbo.Services AS s ON s.ID = cah.HoursServiceID
	LEFT JOIN dbo.Insurances AS i ON i.ID = p.PatientInsuranceID

	WHERE cahb.ID IS NULL
	-- ORDER BY cah.HoursDate DESC
	;
GO
/****** Object:  View [dbo].[InsurancesWithoutAuthMatchRules]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[InsurancesWithoutAuthMatchRules] AS

	SELECT 
		i.ID AS InsuranceID, 
		i.InsuranceName, 
		m.ID AS MatchRuleID

	FROM dbo.Insurances AS i
	LEFT JOIN dbo.AuthMatchRules AS m ON m.InsuranceID = i.ID

	WHERE m.ID IS NULL;
GO
/****** Object:  View [dbo].[PatientCurrentInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[PatientCurrentInsurance] AS
	SELECT	
		p.ID AS PatientID,
		c.ID AS CaseID,
		ci.InsuranceID,
		ci.DatePlanEffective,
		ci.DatePlanTerminated
	FROM dbo.Patients AS p
	INNER JOIN dbo.Cases AS c ON c.PatientID = p.ID
	LEFT JOIN dbo.CaseInsurances AS ci 
		ON c.ID = ci.CaseID 
		AND (ci.DatePlanEffective IS NULL OR ci.DatePlanEffective <= GETDATE())
		AND (ci.DatePlanTerminated IS NULL OR ci.DatePlanTerminated >= GETDATE());


GO
/****** Object:  View [dbo].[SourceMapped]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[SourceMapped] AS 

SELECT 
	insurances.InsuranceID,
	insurances.SourceInsuranceName,
	patients.PatientID,
	s.*
		
FROM dbo.Source AS s
LEFT JOIN (
	SELECT p.PatientLastName + ', ' + p.PatientFirstName AS PatientName,
		p.PatientInsuranceMemberID AS SubscriberID,
		p.ID AS PatientID
	FROM dbo.Patients AS p
) AS patients ON patients.PatientName = s.PatientName

LEFT JOIN (
	SELECT i.ID AS InsuranceID,
		i.InsuranceName,
		CASE i.InsuranceName 
			WHEN 'UNITEDHEALTHCARE CHOICE PLUS - CHO02' THEN 'UNITEDHEALTHCARE CHOICE PLUS'  
			WHEN 'VALUE OPTIONS - VAL01 (HIP)' THEN 'VALUE OPTIONS (HIP)'
			WHEN 'Oxford Health Plans - OXF01' THEN 'QUALCARE/OXFORD'
			WHEN 'CDPHP' THEN 'CDPHP/OPTUM'
			WHEN 'Wellcare of NY' THEN 'WELLCARE'
			WHEN 'UNITEDHEALTHCARE CHOICE PLUS - CHO02' THEN 'UNITEDHEALTHCARE CHOICE PLUS/OSCAR'
			WHEN 'Cigna' THEN 'CIGNA HEALTH PLANS'
			WHEN 'Fidelis ' THEN 'FIDELIS CARE OF NEW YORK'
			WHEN 'CDPHP' THEN 'CAPITAL DISTRICT PHYSICIANS HEALTH'
			WHEN 'Blue Cross and Blue Shield' THEN 'BLUE CROSS BLUE SHIELD'
			WHEN 'Ameri Health' THEN 'AMERIHEALTH HMO'
			WHEN 'VALUE OPTIONS - VAL01 (EMBLEM HEALTH)' THEN 'VALUE OPTIONS (EMBLEM HEALTH)'
			WHEN 'Care Connect' THEN 'NORTH SHORE LIJ CARECONNECT'
			WHEN 'Health First' THEN 'HEALTHFIRST'
			WHEN 'NEW YORK EMPIRE BLUE SHEILD' THEN 'NEW YORK EMPIRE BLUE SHIELD'
			WHEN 'VALUE OPTIONS - VAL01 (THE EMPIRE PLAN)' THEN 'VALUE OPTIONS (THE EMPIRE PLAN)'
			WHEN 'Cigna' THEN 'CIGNA HEALTH PLANS/MAGNA CARE'
			WHEN 'Oxford Health Plans - OXF01' THEN 'OXFORD HEALTH PLANS'
			ELSE i.InsuranceName END AS SourceInsuranceName
	FROM dbo.Insurances AS i
) AS insurances ON insurances.SourceInsuranceName = s.InsuranceName

WHERE patients.PatientID IS NOT NULL
	AND insurances.InsuranceID IS NOT NULL;


GO
/****** Object:  View [dbo].[UtilityCasePatientBase]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[UtilityCasePatientBase] AS

	SELECT
		c.ID AS CaseID,
		p.ID AS PatientID,
		p.PatientFirstName,
		p.PatientLastName
	FROM dbo.Cases AS c
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID;
GO
/****** Object:  View [dbo].[UtilityHoursWithServices]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 CREATE VIEW [dbo].[UtilityHoursWithServices] AS

SELECT
	p.PatientFirstName + ' ' + p.PatientLastName AS PatientName,
	pv.ProviderFirstName + ' ' + pv.ProviderLastName AS ProviderName,
	cah.HoursDate,
	s.ServiceCode,
	cah.HoursTotal,
	i.InsuranceName,
	pt.ProviderTypeCode AS ProviderType,
	cah.ID AS HoursID,
	cah.CaseID,
	cah.CaseProviderID,
	cah.HoursServiceID,
	i.ID AS InsuranceID,
	pt.ID AS ProviderTypeID
FROM dbo.CaseAuthHours AS cah
INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
INNER JOIN dbo.Providers AS pv ON pv.ID = cah.CaseProviderID
INNER JOIN dbo.ProviderTypes AS pt ON pt.ID = pv.ProviderType
INNER JOIN dbo.Services AS s ON s.ID = cah.HoursServiceID
LEFT JOIN dbo.Insurances AS i ON i.ID = p.PatientInsuranceID
-- */
GO
/****** Object:  View [dbo].[UtilityParentPortalUsers]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[UtilityParentPortalUsers] AS
	SELECT ppl.LoginEmail, ppl.LoginFirstName, ppl.LoginLastName, ppl.Active, ppwm.MemberPassword 
	FROM dbo.PatientPortalWebMembership AS ppwm
	INNER JOIN dbo.PatientPortalLogins AS ppl ON ppl.ID = ppwm.ID




GO
/****** Object:  View [exports].[IDMappings]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Export IDs for PowerBI Mappings
CREATE VIEW [exports].[IDMappings] AS 

	SELECT 
		'Patient' AS Entity, 
		p.ID, 
		p.PatientFirstName AS FirstName, 
		p.PatientLastName AS LastName, 
		p.PatientDateOfBirth AS DOB
	FROM dbo.Patients AS p

	UNION ALL

	SELECT
		'Provider',
		p.ID,
		p.ProviderFirstName,
		p.ProviderLastName,
		NULL
	FROM dbo.Providers AS p

	UNION ALL

	SELECT
		'Case',
		c.ID,
		p.PatientFirstName,
		p.PatientLastName,
		p.PatientDateOfBirth
	FROM dbo.Cases AS c
	INNER JOIN dbo.Patients AS p ON c.PatientID = p.ID
GO
/****** Object:  View [exports].[ProviderPayables]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [exports].[ProviderPayables] AS

	SELECT
		cah.HoursDate,
		p.ID AS ProviderID,
		p.ProviderFirstName,
		p.ProviderLastName,
		cah.HoursPayable,
		p.ProviderRate,
		pt.ID AS PatientID,
		pt.PatientFirstName,
		pt.PatientLastName,
		i.ID AS InsuranceID,
		i.InsuranceName,
		p.ProviderType AS ProviderTypeID,
		ptypes.ProviderTypeCode AS ProviderTypeCode,
		ptypes.ProviderTypeName AS ProviderTypeName
	FROM dbo.Providers AS p
		INNER JOIN dbo.CaseAuthHours AS cah ON cah.CaseProviderID = p.ID
		INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
		INNER JOIN dbo.Patients AS pt ON pt.ID = c.PatientID
		LEFT JOIN dbo.Insurances AS i ON pt.PatientInsuranceID = i.ID
		LEFT JOIN dbo.ProviderTypes AS ptypes ON ptypes.ID = p.ProviderType
	WHERE cah.HoursStatus = 3 -- finalized only


GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxAuthCodeCode]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxAuthCodeCode] ON [dbo].[AuthCodes]
(
	[CodeCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxAuthMatchRuleInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxAuthMatchRuleInsurance] ON [dbo].[AuthMatchRules]
(
	[InsuranceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxAuthMatchRuleProviderType]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxAuthMatchRuleProviderType] ON [dbo].[AuthMatchRules]
(
	[ProviderTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxAuthMatchRuleService]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxAuthMatchRuleService] ON [dbo].[AuthMatchRules]
(
	[ServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxCaseAuthClassCode]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseAuthClassCode] ON [dbo].[CaseAuthClasses]
(
	[AuthClassCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CaseAuthID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_CaseAuthID] ON [dbo].[CaseAuthCodeGeneralHours]
(
	[CaseAuthID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseAuthCodeAuthCodeID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseAuthCodeAuthCodeID] ON [dbo].[CaseAuthCodes]
(
	[AuthCodeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseAuthCodeCaseCodeClass]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseAuthCodeCaseCodeClass] ON [dbo].[CaseAuthCodes]
(
	[AuthClassID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseAuthCodeCaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseAuthCodeCaseID] ON [dbo].[CaseAuthCodes]
(
	[CaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxHoursDateIncludeCaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxHoursDateIncludeCaseID] ON [dbo].[CaseAuthHours]
(
	[HoursDate] ASC
)
INCLUDE ( 	[CaseID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxHoursDateIncludeCaseProviderCaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxHoursDateIncludeCaseProviderCaseID] ON [dbo].[CaseAuthHours]
(
	[HoursDate] ASC
)
INCLUDE ( 	[CaseProviderID],
	[CaseID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProvIDHoursDateIncludeCaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProvIDHoursDateIncludeCaseID] ON [dbo].[CaseAuthHours]
(
	[CaseProviderID] ASC,
	[HoursDate] ASC
)
INCLUDE ( 	[CaseID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_HoursDate]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_HoursDate] ON [dbo].[CaseAuthHours]
(
	[HoursDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseAuthHoursBreakdownHoursID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseAuthHoursBreakdownHoursID] ON [dbo].[CaseAuthHoursBreakdown]
(
	[HoursID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseAuthHoursBreakdownUniqueHoursAuth]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseAuthHoursBreakdownUniqueHoursAuth] ON [dbo].[CaseAuthHoursBreakdown]
(
	[HoursID] ASC,
	[CaseAuthID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Missing_IXNC_CaseAuthHoursBreakdown_CaseAuthID_AF196]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [Missing_IXNC_CaseAuthHoursBreakdown_CaseAuthID_AF196] ON [dbo].[CaseAuthHoursBreakdown]
(
	[CaseAuthID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCAHNAuthHoursID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCAHNAuthHoursID] ON [dbo].[CaseAuthHoursNotes]
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseAuthHoursNotesHoursTemplateID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseAuthHoursNotesHoursTemplateID] ON [dbo].[CaseAuthHoursNotes]
(
	[HoursID] ASC,
	[NotesTemplateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [Missing_IXNC_CaseAuthHoursNotes_HoursID_459F1]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [Missing_IXNC_CaseAuthHoursNotes_HoursID_459F1] ON [dbo].[CaseAuthHoursNotes]
(
	[HoursID] ASC
)
INCLUDE ( 	[ID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [Missing_IXNC_CaseAuthHoursNotes_HoursID_B01D8]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [Missing_IXNC_CaseAuthHoursNotes_HoursID_B01D8] ON [dbo].[CaseAuthHoursNotes]
(
	[HoursID] ASC
)
INCLUDE ( 	[ID],
	[NotesTemplateID],
	[NotesAnswer]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [Missing_IXNC_CaseAuthHoursNotes_HoursID_C30AC]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [Missing_IXNC_CaseAuthHoursNotes_HoursID_C30AC] ON [dbo].[CaseAuthHoursNotes]
(
	[HoursID] ASC
)
INCLUDE ( 	[ID],
	[DateCreated],
	[rv],
	[NotesTemplateID],
	[NotesAnswer]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxCaseBillingReportID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseBillingReportID] ON [dbo].[CaseBillingReports]
(
	[ReportID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReportGeneratedByUserID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReportGeneratedByUserID] ON [dbo].[CaseBillingReports]
(
	[ReportGeneratedByUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReportPeriodID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReportPeriodID] ON [dbo].[CaseBillingReports]
(
	[ReportPeriodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseInsuranceCaseIDFK]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseInsuranceCaseIDFK] ON [dbo].[CaseInsurances]
(
	[CaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseInsuranceDefective]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseInsuranceDefective] ON [dbo].[CaseInsurances]
(
	[DatePlanTerminated] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseInsuranceEffective]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseInsuranceEffective] ON [dbo].[CaseInsurances]
(
	[DatePlanEffective] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseMonthlyPeriodProviderCase]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseMonthlyPeriodProviderCase] ON [dbo].[CaseMonthlyPeriodProviderFinalizations]
(
	[CaseMonthlyPeriodID] ASC,
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CaseMonthlyPeriodID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_CaseMonthlyPeriodID] ON [dbo].[CaseMonthlyPeriodProviderFinalizations]
(
	[CaseMonthlyPeriodID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderID] ON [dbo].[CaseMonthlyPeriodProviderFinalizations]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseMonthlyPeriodsCaseMonth]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseMonthlyPeriodsCaseMonth] ON [dbo].[CaseMonthlyPeriods]
(
	[CaseID] ASC,
	[PeriodFirstDayOfMonth] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_CaseID] ON [dbo].[CaseMonthlyPeriods]
(
	[CaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxCasePayableReportID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCasePayableReportID] ON [dbo].[CasePayableReports]
(
	[ReportID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_RecurringAppointmentId]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_RecurringAppointmentId] ON [dbo].[CaseProviderAppointments]
(
	[RecurringAppointmentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CaseProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_CaseProviderID] ON [dbo].[CaseProviderNotes]
(
	[CaseProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseProvidersActive]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseProvidersActive] ON [dbo].[CaseProviders]
(
	[Active] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseProvidersCase]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseProvidersCase] ON [dbo].[CaseProviders]
(
	[CaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseProvidersJuncIDs]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseProvidersJuncIDs] ON [dbo].[CaseProviders]
(
	[CaseID] ASC,
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderID] ON [dbo].[CaseProviders]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PatientID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_PatientID] ON [dbo].[Cases]
(
	[PatientID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseTasksEnteredOn]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCaseTasksEnteredOn] ON [dbo].[CaseTasks]
(
	[TaskEnteredOn] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_CaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_CaseID] ON [dbo].[CaseTasks]
(
	[CaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_TaskCompletedByStaffID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_TaskCompletedByStaffID] ON [dbo].[CaseTasks]
(
	[TaskCompletedByStaffID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxGuardianRelationshipsName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxGuardianRelationshipsName] ON [dbo].[GuardianRelationships]
(
	[RelationshipName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCAHNNotesTemplateID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxCAHNNotesTemplateID] ON [dbo].[HoursNoteTemplates]
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ISO_639_1]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ISO_639_1] ON [dbo].[ISO639_2_Lang]
(
	[ISO_639_1] ASC
)
WHERE ([ISO_639_1] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ISO_639_2_Active]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ISO_639_2_Active] ON [dbo].[ISO639_2_Lang]
(
	[Active] ASC
)
WHERE ([Active]=(1))
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ISO_639_2_Bibliographic]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ISO_639_2_Bibliographic] ON [dbo].[ISO639_2_Lang]
(
	[ISO_639_2_Bibliographic] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ISO_639_2_Terminology]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ISO_639_2_Terminology] ON [dbo].[ISO639_2_Lang]
(
	[ISO_639_2_Terminology] ASC
)
WHERE ([ISO_639_2_Terminology] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LoginId]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_LoginId] ON [dbo].[PatientPortalAcceptedTerms]
(
	[LoginId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_TermsId]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_TermsId] ON [dbo].[PatientPortalAcceptedTerms]
(
	[TermsId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxPatientPortalLoginLoginID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxPatientPortalLoginLoginID] ON [dbo].[PatientPortalLoginPatients]
(
	[LoginID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxPatientPortalLoginPatientID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxPatientPortalLoginPatientID] ON [dbo].[PatientPortalLoginPatients]
(
	[PatientID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxUniquePatientPortalEmail]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxUniquePatientPortalEmail] ON [dbo].[PatientPortalLogins]
(
	[LoginEmail] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxPatientFirstName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxPatientFirstName] ON [dbo].[Patients]
(
	[PatientFirstName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxPatientInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxPatientInsurance] ON [dbo].[Patients]
(
	[PatientInsuranceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxPatientLastName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxPatientLastName] ON [dbo].[Patients]
(
	[PatientLastName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxPatientsZip]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxPatientsZip] ON [dbo].[Patients]
(
	[PatientZip] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_PatientGuardianRelationshipID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_PatientGuardianRelationshipID] ON [dbo].[Patients]
(
	[PatientGuardianRelationshipID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxCaseProviderRatesEffectiveDate]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxCaseProviderRatesEffectiveDate] ON [dbo].[ProviderCaseRates]
(
	[ProviderID] ASC,
	[CaseID] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderCaseRateCaseID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderCaseRateCaseID] ON [dbo].[ProviderCaseRates]
(
	[CaseID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderCaseRateEffectiveDate]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderCaseRateEffectiveDate] ON [dbo].[ProviderCaseRates]
(
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderCaseRateProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderCaseRateProviderID] ON [dbo].[ProviderCaseRates]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderInsuranceBlacklistProviderInsurance]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderInsuranceBlacklistProviderInsurance] ON [dbo].[ProviderInsuranceBlacklist]
(
	[ProviderID] ASC,
	[InsuranceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_InsuranceID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_InsuranceID] ON [dbo].[ProviderInsuranceBlacklist]
(
	[InsuranceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderID] ON [dbo].[ProviderInsuranceBlacklist]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderLanguagesProvLang]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderLanguagesProvLang] ON [dbo].[ProviderLanguages]
(
	[ProviderID] ASC,
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LanguageID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_LanguageID] ON [dbo].[ProviderLanguages]
(
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_LanguageStrength]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_LanguageStrength] ON [dbo].[ProviderLanguages]
(
	[LanguageStrength] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderID] ON [dbo].[ProviderLanguages]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderPortalAspNetID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderPortalAspNetID] ON [dbo].[ProviderPortalUsers]
(
	[AspNetUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderPortalProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderPortalProviderID] ON [dbo].[ProviderPortalUsers]
(
	[ProviderID] ASC
)
WHERE ([ProviderID] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxProviderPortalUserNumer]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderPortalUserNumer] ON [dbo].[ProviderPortalUsers]
(
	[ProviderUserNumber] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderRateEffectiveDate]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderRateEffectiveDate] ON [dbo].[ProviderRates]
(
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderRateProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderRateProviderID] ON [dbo].[ProviderRates]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderRatesUniqueEffectiveDate]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderRatesUniqueEffectiveDate] ON [dbo].[ProviderRates]
(
	[ProviderID] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderActive]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderActive] ON [dbo].[Providers]
(
	[ProviderActive] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxProviderFirstName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderFirstName] ON [dbo].[Providers]
(
	[ProviderFirstName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderIsHired]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderIsHired] ON [dbo].[Providers]
(
	[ProviderIsHired] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxProviderLastName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderLastName] ON [dbo].[Providers]
(
	[ProviderLastName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderType]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderType] ON [dbo].[Providers]
(
	[ProviderType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderServiceRateEffectiveDate]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderServiceRateEffectiveDate] ON [dbo].[ProviderServiceRates]
(
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderServiceRateProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderServiceRateProviderID] ON [dbo].[ProviderServiceRates]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderServiceRateServiceID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderServiceRateServiceID] ON [dbo].[ProviderServiceRates]
(
	[ServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderServiceRatesUnique]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderServiceRatesUnique] ON [dbo].[ProviderServiceRates]
(
	[ProviderID] ASC,
	[ServiceID] ASC,
	[EffectiveDate] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderServiceZipCodesIsPrimary]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxProviderServiceZipCodesIsPrimary] ON [dbo].[ProviderServiceZipCodes]
(
	[IsPrimary] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxProviderZipCodeProviderZip]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderZipCodeProviderZip] ON [dbo].[ProviderServiceZipCodes]
(
	[ProviderID] ASC,
	[ZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProviderID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderID] ON [dbo].[ProviderServiceZipCodes]
(
	[ProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [IX_ZipCode]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ZipCode] ON [dbo].[ProviderServiceZipCodes]
(
	[ZipCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxProviderTypeServicesTypeService]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxProviderTypeServicesTypeService] ON [dbo].[ProviderTypeServices]
(
	[ProviderTypeID] ASC,
	[ServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_AssociatedAuthClassID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_AssociatedAuthClassID] ON [dbo].[ProviderTypeServices]
(
	[AssociatedAuthClassID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ProviderTypeID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ProviderTypeID] ON [dbo].[ProviderTypeServices]
(
	[ProviderTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ServiceID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ServiceID] ON [dbo].[ProviderTypeServices]
(
	[ServiceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxReferralChecklistReferralID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxReferralChecklistReferralID] ON [dbo].[ReferralChecklist]
(
	[ReferralID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxReferralChecklistRefferalItemJunc]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxReferralChecklistRefferalItemJunc] ON [dbo].[ReferralChecklist]
(
	[ReferralID] ASC,
	[ChecklistItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ChecklistItemID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ChecklistItemID] ON [dbo].[ReferralChecklist]
(
	[ChecklistItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxReferralDismissalReasonsCode]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxReferralDismissalReasonsCode] ON [dbo].[ReferralDismissalReasons]
(
	[ReasonCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxReferralActive]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxReferralActive] ON [dbo].[Referrals]
(
	[ReferralActive] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReferralDismissalReasonID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReferralDismissalReasonID] ON [dbo].[Referrals]
(
	[ReferralDismissalReasonID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReferralEnteredByStaffID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReferralEnteredByStaffID] ON [dbo].[Referrals]
(
	[ReferralEnteredByStaffID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_ReferralSourceType]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_ReferralSourceType] ON [dbo].[Referrals]
(
	[ReferralSourceType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_SettingValueType]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_SettingValueType] ON [dbo].[ReferralSettings]
(
	[SettingValueType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxReferralStatusCode]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxReferralStatusCode] ON [dbo].[ReferralStatuses]
(
	[StatusCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxServiceLocationMBHID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxServiceLocationMBHID] ON [dbo].[ServiceLocations]
(
	[LocationMBHID] ASC
)
WHERE ([LocationMBHID] IS NOT NULL)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxServiceLocationName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxServiceLocationName] ON [dbo].[ServiceLocations]
(
	[LocationName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxServiceCode]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxServiceCode] ON [dbo].[Services]
(
	[ServiceCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxSettingValueTypeName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxSettingValueTypeName] ON [dbo].[SettingValueTypes]
(
	[TypeName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxSMTPAccountName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxSMTPAccountName] ON [dbo].[SMTPAccounts]
(
	[AccountName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [idxStaffActive]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [idxStaffActive] ON [dbo].[Staff]
(
	[StaffActive] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_WebOptionGroupID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_WebOptionGroupID] ON [dbo].[WebOptions]
(
	[WebOptionGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_WebPermissionGroupID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_WebPermissionGroupID] ON [dbo].[WebPermissions]
(
	[WebPermissionGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_WebOptionID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_WebOptionID] ON [dbo].[WebUserOptions]
(
	[WebOptionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_WebUserID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_WebUserID] ON [dbo].[WebUserOptions]
(
	[WebUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_WebPermissionID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_WebPermissionID] ON [dbo].[WebUserPermissions]
(
	[WebPermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_WebUserID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_WebUserID] ON [dbo].[WebUserPermissions]
(
	[WebUserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/****** Object:  Index [IX_StaffID]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [IX_StaffID] ON [dbo].[WebUsers]
(
	[StaffID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [Missing_IXNC_ZipCodes_ZipState_ZipCity_10074]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [Missing_IXNC_ZipCodes_ZipState_ZipCity_10074] ON [dbo].[ZipCodes]
(
	[ZipState] ASC,
	[ZipCity] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [Missing_IXNC_ZipCodes_ZipState_ZipCounty_A9E3B]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE NONCLUSTERED INDEX [Missing_IXNC_ZipCodes_ZipState_ZipCounty_A9E3B] ON [dbo].[ZipCodes]
(
	[ZipState] ASC,
	[ZipCounty] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
SET ANSI_PADDING ON

GO
/****** Object:  Index [idxMetaDBSettingsSettingName]    Script Date: 12/7/2017 12:49:48 PM ******/
CREATE UNIQUE NONCLUSTERED INDEX [idxMetaDBSettingsSettingName] ON [meta].[DatabaseSettings]
(
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
ALTER TABLE [dbo].[AuthCodes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AuthMatchRules] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AuthMatchRules] ADD  DEFAULT ((0)) FOR [RuleBillingMethod]
GO
ALTER TABLE [dbo].[AuthMatchRules] ADD  DEFAULT ((0)) FOR [RuleAllowOverlapping]
GO
ALTER TABLE [dbo].[AuthMatchRules] ADD  DEFAULT ((0)) FOR [RuleRequiresAuthorizedBCBA]
GO
ALTER TABLE [dbo].[AuthMatchRules] ADD  DEFAULT ((1)) FOR [RuleRequiresPreAuthorization]
GO
ALTER TABLE [dbo].[CaseAuthClasses] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthCodeGeneralHours] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthCodeGeneralHours] ADD  CONSTRAINT [DF_AuthGenHr_HrsAppl]  DEFAULT ((0)) FOR [HoursApplied]
GO
ALTER TABLE [dbo].[CaseAuthCodes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthCodes] ADD  CONSTRAINT [DF_AuthCode_TotalHours]  DEFAULT ((0)) FOR [AuthTotalHoursApproved]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [HoursTotal]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [HoursStatus]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [HoursHasCatalystData]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [HoursWatchEnabled]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [IsPayrollOrBillingAdjustment]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [ParentReported]
GO
ALTER TABLE [dbo].[CaseAuthHours] ADD  DEFAULT ((0)) FOR [HoursTrainingEntry]
GO
ALTER TABLE [dbo].[CaseAuthHoursBreakdown] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthHoursNotes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthHoursReportLog] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseAuthHoursReportLog] ADD  DEFAULT ((0)) FOR [IsResolved]
GO
ALTER TABLE [dbo].[CaseBillingReports] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseBillingReports] ADD  DEFAULT (getdate()) FOR [ReportGenerationDate]
GO
ALTER TABLE [dbo].[CaseInsurances] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodParentApprovals] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodParentApprovals] ADD  DEFAULT (getdate()) FOR [ApprovalDate]
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodProviderFinalizations] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseMonthlyPeriods] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseMonthlyPeriods] ADD  DEFAULT ((0)) FOR [WatchIgnore]
GO
ALTER TABLE [dbo].[CaseNotes] ADD  DEFAULT ((0)) FOR [RequiresFollowup]
GO
ALTER TABLE [dbo].[CaseNotes] ADD  DEFAULT ((0)) FOR [FollowupComplete]
GO
ALTER TABLE [dbo].[CasePayableReports] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseProviderNotes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseProviders] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseProviders] ADD  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[CaseProviders] ADD  DEFAULT ((0)) FOR [IsSupervisor]
GO
ALTER TABLE [dbo].[CaseProviders] ADD  DEFAULT ((0)) FOR [IsAssessor]
GO
ALTER TABLE [dbo].[CaseProviders] ADD  DEFAULT ((0)) FOR [IsInsuranceAuthorizedBCBA]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT ((0)) FOR [CaseStatus]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT ((0)) FOR [CaseHasPrescription]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT ((0)) FOR [CaseHasAssessment]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT ((0)) FOR [CaseHasIntake]
GO
ALTER TABLE [dbo].[Cases] ADD  CONSTRAINT [statusreasondefault]  DEFAULT ((0)) FOR [CaseStatusReason]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT ((0)) FOR [CaseNeedsStaffing]
GO
ALTER TABLE [dbo].[Cases] ADD  DEFAULT ((0)) FOR [CaseNeedsRestaffing]
GO
ALTER TABLE [dbo].[CaseTasks] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[CaseTasks] ADD  DEFAULT (getdate()) FOR [TaskEnteredOn]
GO
ALTER TABLE [dbo].[CaseTasks] ADD  DEFAULT ((0)) FOR [TaskComplete]
GO
ALTER TABLE [dbo].[HoursNoteTemplateGroups] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[HoursNoteTemplates] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Insurances] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ISO639_2_Lang] ADD  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[Languages] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Languages] ADD  DEFAULT ((1)) FOR [LangIsActive]
GO
ALTER TABLE [dbo].[PatientPortalLoginPatients] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[PatientPortalLogins] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[PatientPortalLogins] ADD  DEFAULT ((0)) FOR [Active]
GO
ALTER TABLE [dbo].[PatientPortalLoginSignatures] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[PatientPortalTerms] ADD  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[PatientPortalTerms] ADD  DEFAULT (getdate()) FOR [Created]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT ((0)) FOR [MemberIsApproved]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberLastActivityDateUTC]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberLastLoginDateUTC]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberLastPasswordChangedDateUTC]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberCreationDateUTC]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT ((0)) FOR [MemberIsLockedOut]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberLastLockoutDateUTC]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT ((0)) FOR [MemberFailedPasswordAttemptCount]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberFailedPasswordWindowStartUTC]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT ((0)) FOR [MemberFailedPasswordAnswerAttemptCount]
GO
ALTER TABLE [dbo].[PatientPortalWebMembership] ADD  DEFAULT (getdate()) FOR [MemberFailedPasswordAnswerAttemptWindowStartUTC]
GO
ALTER TABLE [dbo].[Patients] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderCaseRates] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderInsuranceBlacklist] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderLanguages] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderPortalUsers] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderRates] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderRates] ADD  DEFAULT ((0)) FOR [RateType]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderHasBackgroundCheck]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderHasReferences]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderHasResume]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderCanCall]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderCanReachByPhone]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderCanEmail]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((1)) FOR [ProviderActive]
GO
ALTER TABLE [dbo].[Providers] ADD  DEFAULT ((0)) FOR [ProviderIsHired]
GO
ALTER TABLE [dbo].[ProviderServiceRates] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderServiceZipCodes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderServiceZipCodes] ADD  DEFAULT ((1)) FOR [IsPrimary]
GO
ALTER TABLE [dbo].[ProviderTypes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ProviderTypes] ADD  CONSTRAINT [dfProvTypeCanSuper]  DEFAULT ((0)) FOR [ProviderTypeCanSuperviseCase]
GO
ALTER TABLE [dbo].[ProviderTypeServices] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ReferralChecklist] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ReferralChecklist] ADD  DEFAULT ((0)) FOR [ItemIsComplete]
GO
ALTER TABLE [dbo].[ReferralChecklistItems] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ReferralDismissalReasons] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Referrals] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Referrals] ADD  DEFAULT ((0)) FOR [ReferralStatus]
GO
ALTER TABLE [dbo].[Referrals] ADD  DEFAULT ((0)) FOR [ReferralFollowup]
GO
ALTER TABLE [dbo].[Referrals] ADD  DEFAULT ((1)) FOR [ReferralActive]
GO
ALTER TABLE [dbo].[ReferralSettings] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ReferralSourceTypes] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ReferralStatuses] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceLocations] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[ServiceLocations] ADD  DEFAULT ((1)) FOR [Active]
GO
ALTER TABLE [dbo].[Services] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[SMTPAccounts] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Source] ADD  DEFAULT ((0)) FOR [Active]
GO
ALTER TABLE [dbo].[Staff] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[Staff] ADD  DEFAULT ((1)) FOR [StaffActive]
GO
ALTER TABLE [dbo].[TransactionLog] ADD  CONSTRAINT [DF_TransactionLog_Date]  DEFAULT (getdate()) FOR [Date]
GO
ALTER TABLE [dbo].[WebUserOptions] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[WebUserPermissions] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[WebUsers] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [meta].[DatabaseSettings] ADD  DEFAULT (getdate()) FOR [DateCreated]
GO
ALTER TABLE [dbo].[AuthMatchRules]  WITH CHECK ADD FOREIGN KEY([InsuranceID])
REFERENCES [dbo].[Insurances] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AuthMatchRules]  WITH CHECK ADD FOREIGN KEY([ProviderTypeID])
REFERENCES [dbo].[ProviderTypes] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[AuthMatchRules]  WITH CHECK ADD FOREIGN KEY([ServiceID])
REFERENCES [dbo].[Services] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthCodeGeneralHours]  WITH CHECK ADD FOREIGN KEY([CaseAuthID])
REFERENCES [dbo].[CaseAuthCodes] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthCodes]  WITH CHECK ADD FOREIGN KEY([AuthCodeID])
REFERENCES [dbo].[AuthCodes] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthCodes]  WITH CHECK ADD FOREIGN KEY([AuthClassID])
REFERENCES [dbo].[CaseAuthClasses] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthCodes]  WITH CHECK ADD FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthHoursBreakdown]  WITH CHECK ADD FOREIGN KEY([HoursID])
REFERENCES [dbo].[CaseAuthHours] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthHoursNotes]  WITH CHECK ADD FOREIGN KEY([HoursID])
REFERENCES [dbo].[CaseAuthHours] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseAuthHoursNotes]  WITH CHECK ADD FOREIGN KEY([NotesTemplateID])
REFERENCES [dbo].[HoursNoteTemplates] ([ID])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CaseBillingCorrespondences]  WITH CHECK ADD  CONSTRAINT [FK_CaseBillingCorrespondences_CaseBillingCorrespondenceTypes] FOREIGN KEY([CorrespondenceTypeId])
REFERENCES [dbo].[CaseBillingCorrespondenceTypes] ([Id])
GO
ALTER TABLE [dbo].[CaseBillingCorrespondences] CHECK CONSTRAINT [FK_CaseBillingCorrespondences_CaseBillingCorrespondenceTypes]
GO
ALTER TABLE [dbo].[CaseBillingCorrespondences]  WITH CHECK ADD  CONSTRAINT [FK_CaseBillingCorrespondences_Cases] FOREIGN KEY([CaseId])
REFERENCES [dbo].[Cases] ([ID])
GO
ALTER TABLE [dbo].[CaseBillingCorrespondences] CHECK CONSTRAINT [FK_CaseBillingCorrespondences_Cases]
GO
ALTER TABLE [dbo].[CaseBillingCorrespondences]  WITH CHECK ADD  CONSTRAINT [FK_CaseBillingCorrespondences_Staff] FOREIGN KEY([StaffId])
REFERENCES [dbo].[Staff] ([ID])
GO
ALTER TABLE [dbo].[CaseBillingCorrespondences] CHECK CONSTRAINT [FK_CaseBillingCorrespondences_Staff]
GO
ALTER TABLE [dbo].[CaseBillingReports]  WITH CHECK ADD FOREIGN KEY([ReportPeriodID])
REFERENCES [dbo].[CaseMonthlyPeriods] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseBillingReports]  WITH CHECK ADD FOREIGN KEY([ReportGeneratedByUserID])
REFERENCES [dbo].[WebUsers] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[CaseInsurancePayments]  WITH CHECK ADD  CONSTRAINT [FK_CaseInsurancePayments_CaseInsurances] FOREIGN KEY([CaseInsuranceId])
REFERENCES [dbo].[CaseInsurances] ([ID])
GO
ALTER TABLE [dbo].[CaseInsurancePayments] CHECK CONSTRAINT [FK_CaseInsurancePayments_CaseInsurances]
GO
ALTER TABLE [dbo].[CaseInsurances]  WITH CHECK ADD  CONSTRAINT [FK_CaseInsurances_Cases] FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
GO
ALTER TABLE [dbo].[CaseInsurances] CHECK CONSTRAINT [FK_CaseInsurances_Cases]
GO
ALTER TABLE [dbo].[CaseInsurances]  WITH CHECK ADD  CONSTRAINT [FK_CaseInsurances_Insurances] FOREIGN KEY([InsuranceID])
REFERENCES [dbo].[Insurances] ([ID])
GO
ALTER TABLE [dbo].[CaseInsurances] CHECK CONSTRAINT [FK_CaseInsurances_Insurances]
GO
ALTER TABLE [dbo].[CaseInsurancesMaxOutOfPocket]  WITH CHECK ADD  CONSTRAINT [FK_CaseInsurancesMaxOutOfPocket_CaseInsurances] FOREIGN KEY([CaseInsuranceId])
REFERENCES [dbo].[CaseInsurances] ([ID])
GO
ALTER TABLE [dbo].[CaseInsurancesMaxOutOfPocket] CHECK CONSTRAINT [FK_CaseInsurancesMaxOutOfPocket_CaseInsurances]
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodParentApprovals]  WITH CHECK ADD FOREIGN KEY([MonthlyPeriodID])
REFERENCES [dbo].[CaseMonthlyPeriods] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodParentApprovals]  WITH CHECK ADD FOREIGN KEY([PatientPortalLoginID])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodProviderFinalizations]  WITH CHECK ADD FOREIGN KEY([CaseMonthlyPeriodID])
REFERENCES [dbo].[CaseMonthlyPeriods] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseMonthlyPeriodProviderFinalizations]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseMonthlyPeriods]  WITH CHECK ADD FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseNotes]  WITH CHECK ADD FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
GO
ALTER TABLE [dbo].[CaseNotes]  WITH CHECK ADD FOREIGN KEY([EnteredByUserID])
REFERENCES [dbo].[WebUsers] ([ID])
GO
ALTER TABLE [dbo].[CaseNotes]  WITH CHECK ADD FOREIGN KEY([EnteredByUserID])
REFERENCES [dbo].[WebUsers] ([ID])
GO
ALTER TABLE [dbo].[CaseNoteTasks]  WITH CHECK ADD FOREIGN KEY([AssignedTo])
REFERENCES [dbo].[Staff] ([ID])
GO
ALTER TABLE [dbo].[CaseNoteTasks]  WITH CHECK ADD FOREIGN KEY([CompletedBy])
REFERENCES [dbo].[WebUsers] ([ID])
GO
ALTER TABLE [dbo].[CaseNoteTasks]  WITH CHECK ADD FOREIGN KEY([NoteID])
REFERENCES [dbo].[CaseNotes] ([ID])
GO
ALTER TABLE [dbo].[CasePaymentPlans]  WITH CHECK ADD  CONSTRAINT [FK_CasePaymentPlans_Cases] FOREIGN KEY([CaseId])
REFERENCES [dbo].[Cases] ([ID])
GO
ALTER TABLE [dbo].[CasePaymentPlans] CHECK CONSTRAINT [FK_CasePaymentPlans_Cases]
GO
ALTER TABLE [dbo].[CaseProviderAppointments]  WITH CHECK ADD  CONSTRAINT [FK_CaseProviderAppointments_Cases] FOREIGN KEY([CaseId])
REFERENCES [dbo].[Cases] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseProviderAppointments] CHECK CONSTRAINT [FK_CaseProviderAppointments_Cases]
GO
ALTER TABLE [dbo].[CaseProviderAppointments]  WITH CHECK ADD  CONSTRAINT [FK_CaseProviderAppointments_Providers] FOREIGN KEY([ProviderId])
REFERENCES [dbo].[Providers] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseProviderAppointments] CHECK CONSTRAINT [FK_CaseProviderAppointments_Providers]
GO
ALTER TABLE [dbo].[CaseProviderAppointments]  WITH CHECK ADD  CONSTRAINT [FK_dbo.CaseProviderAppointments_dbo.CaseProviderAppointments_RecurringAppointmentId] FOREIGN KEY([RecurringAppointmentId])
REFERENCES [dbo].[CaseProviderAppointments] ([Id])
GO
ALTER TABLE [dbo].[CaseProviderAppointments] CHECK CONSTRAINT [FK_dbo.CaseProviderAppointments_dbo.CaseProviderAppointments_RecurringAppointmentId]
GO
ALTER TABLE [dbo].[CaseProviderNotes]  WITH CHECK ADD FOREIGN KEY([CaseProviderID])
REFERENCES [dbo].[CaseProviders] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseProviders]  WITH CHECK ADD FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseProviders]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Cases]  WITH CHECK ADD FOREIGN KEY([PatientID])
REFERENCES [dbo].[Patients] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseTasks]  WITH CHECK ADD FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[CaseTasks]  WITH CHECK ADD FOREIGN KEY([TaskCompletedByStaffID])
REFERENCES [dbo].[Staff] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[CreditCards]  WITH CHECK ADD  CONSTRAINT [FK_CreditCards_PatientPortalLogins] FOREIGN KEY([LoginId])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
GO
ALTER TABLE [dbo].[CreditCards] CHECK CONSTRAINT [FK_CreditCards_PatientPortalLogins]
GO
ALTER TABLE [dbo].[HoursNoteTemplates]  WITH CHECK ADD FOREIGN KEY([TemplateGroupID])
REFERENCES [dbo].[HoursNoteTemplateGroups] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PatientPortalAcceptedTerms]  WITH CHECK ADD  CONSTRAINT [FK_dboPatientPortalAcceptedTerms_dboPatientPortalLogins_LoginId] FOREIGN KEY([LoginId])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PatientPortalAcceptedTerms] CHECK CONSTRAINT [FK_dboPatientPortalAcceptedTerms_dboPatientPortalLogins_LoginId]
GO
ALTER TABLE [dbo].[PatientPortalAcceptedTerms]  WITH CHECK ADD  CONSTRAINT [FK_dboPatientPortalAcceptedTerms_dboPatientPortalTerms_TermsId] FOREIGN KEY([TermsId])
REFERENCES [dbo].[PatientPortalTerms] ([ID])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PatientPortalAcceptedTerms] CHECK CONSTRAINT [FK_dboPatientPortalAcceptedTerms_dboPatientPortalTerms_TermsId]
GO
ALTER TABLE [dbo].[PatientPortalLoginPatients]  WITH CHECK ADD FOREIGN KEY([LoginID])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PatientPortalLoginPatients]  WITH CHECK ADD FOREIGN KEY([PatientID])
REFERENCES [dbo].[Patients] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PatientPortalLoginSignatures]  WITH CHECK ADD FOREIGN KEY([LoginID])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[PatientPortalSignIns]  WITH CHECK ADD  CONSTRAINT [FK_PatientPortalSignIns_PatientPortalWebMembership] FOREIGN KEY([UserId])
REFERENCES [dbo].[PatientPortalWebMembership] ([ID])
GO
ALTER TABLE [dbo].[PatientPortalSignIns] CHECK CONSTRAINT [FK_PatientPortalSignIns_PatientPortalWebMembership]
GO
ALTER TABLE [dbo].[Patients]  WITH CHECK ADD FOREIGN KEY([PatientInsuranceID])
REFERENCES [dbo].[Insurances] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[Patients]  WITH CHECK ADD FOREIGN KEY([PatientGuardianRelationshipID])
REFERENCES [dbo].[GuardianRelationships] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[PaymentCharges]  WITH CHECK ADD  CONSTRAINT [FK_PaymentCharges_CreditCards] FOREIGN KEY([CreditCardId])
REFERENCES [dbo].[CreditCards] ([Id])
GO
ALTER TABLE [dbo].[PaymentCharges] CHECK CONSTRAINT [FK_PaymentCharges_CreditCards]
GO
ALTER TABLE [dbo].[PaymentCharges]  WITH CHECK ADD  CONSTRAINT [FK_PaymentCharges_PatientPortalLogins] FOREIGN KEY([LoginId])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
GO
ALTER TABLE [dbo].[PaymentCharges] CHECK CONSTRAINT [FK_PaymentCharges_PatientPortalLogins]
GO
ALTER TABLE [dbo].[PaymentCharges]  WITH CHECK ADD  CONSTRAINT [FK_PaymentCharges_Payments] FOREIGN KEY([PaymentId])
REFERENCES [dbo].[Payments] ([Id])
GO
ALTER TABLE [dbo].[PaymentCharges] CHECK CONSTRAINT [FK_PaymentCharges_Payments]
GO
ALTER TABLE [dbo].[Payments]  WITH CHECK ADD  CONSTRAINT [FK_Payments_PatientPortalLogins] FOREIGN KEY([LoginId])
REFERENCES [dbo].[PatientPortalLogins] ([ID])
GO
ALTER TABLE [dbo].[Payments] CHECK CONSTRAINT [FK_Payments_PatientPortalLogins]
GO
ALTER TABLE [dbo].[PaymentSchedules]  WITH CHECK ADD  CONSTRAINT [FK_PaymentSchedules_Payments] FOREIGN KEY([PaymentId])
REFERENCES [dbo].[Payments] ([Id])
GO
ALTER TABLE [dbo].[PaymentSchedules] CHECK CONSTRAINT [FK_PaymentSchedules_Payments]
GO
ALTER TABLE [dbo].[ProviderCaseRates]  WITH CHECK ADD FOREIGN KEY([CaseID])
REFERENCES [dbo].[Cases] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderCaseRates]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderInsuranceBlacklist]  WITH CHECK ADD FOREIGN KEY([InsuranceID])
REFERENCES [dbo].[Insurances] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderInsuranceBlacklist]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderInsuranceCredentials]  WITH CHECK ADD  CONSTRAINT [FK_ProviderInsuranceCredentials_Insurances] FOREIGN KEY([InsuranceId])
REFERENCES [dbo].[Insurances] ([ID])
GO
ALTER TABLE [dbo].[ProviderInsuranceCredentials] CHECK CONSTRAINT [FK_ProviderInsuranceCredentials_Insurances]
GO
ALTER TABLE [dbo].[ProviderInsuranceCredentials]  WITH CHECK ADD  CONSTRAINT [FK_ProviderInsuranceCredentials_Providers] FOREIGN KEY([ProviderId])
REFERENCES [dbo].[Providers] ([ID])
GO
ALTER TABLE [dbo].[ProviderInsuranceCredentials] CHECK CONSTRAINT [FK_ProviderInsuranceCredentials_Providers]
GO
ALTER TABLE [dbo].[ProviderLanguages]  WITH CHECK ADD FOREIGN KEY([LanguageID])
REFERENCES [dbo].[ISO639_2_Lang] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderLanguages]  WITH CHECK ADD FOREIGN KEY([LanguageStrength])
REFERENCES [dbo].[LanguageStrengthTypes] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderLanguages]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderPortalUsers]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[ProviderRates]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[Providers]  WITH CHECK ADD  CONSTRAINT [fkProviderProviderType] FOREIGN KEY([ProviderType])
REFERENCES [dbo].[ProviderTypes] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[Providers] CHECK CONSTRAINT [fkProviderProviderType]
GO
ALTER TABLE [dbo].[ProviderServiceRates]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderServiceRates]  WITH CHECK ADD FOREIGN KEY([ServiceID])
REFERENCES [dbo].[Services] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderServiceZipCodes]  WITH CHECK ADD FOREIGN KEY([ProviderID])
REFERENCES [dbo].[Providers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderServiceZipCodes]  WITH CHECK ADD FOREIGN KEY([ZipCode])
REFERENCES [dbo].[ZipCodes] ([ZipCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderTypeServices]  WITH CHECK ADD FOREIGN KEY([AssociatedAuthClassID])
REFERENCES [dbo].[CaseAuthClasses] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[ProviderTypeServices]  WITH CHECK ADD FOREIGN KEY([ProviderTypeID])
REFERENCES [dbo].[ProviderTypes] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ProviderTypeServices]  WITH CHECK ADD FOREIGN KEY([ServiceID])
REFERENCES [dbo].[Services] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReferralChecklist]  WITH CHECK ADD  CONSTRAINT [FK__ReferralC__Check__6D0D32F4] FOREIGN KEY([ChecklistItemID])
REFERENCES [dbo].[ReferralChecklistItems] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReferralChecklist] CHECK CONSTRAINT [FK__ReferralC__Check__6D0D32F4]
GO
ALTER TABLE [dbo].[ReferralChecklist]  WITH CHECK ADD  CONSTRAINT [FK__ReferralC__Refer__6C190EBB] FOREIGN KEY([ReferralID])
REFERENCES [dbo].[Referrals] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[ReferralChecklist] CHECK CONSTRAINT [FK__ReferralC__Refer__6C190EBB]
GO
ALTER TABLE [dbo].[Referrals]  WITH CHECK ADD FOREIGN KEY([ReferralSourceType])
REFERENCES [dbo].[ReferralSourceTypes] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[Referrals]  WITH CHECK ADD  CONSTRAINT [FK__Referrals__Refer__6EC0713C] FOREIGN KEY([ReferralDismissalReasonID])
REFERENCES [dbo].[ReferralDismissalReasons] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[Referrals] CHECK CONSTRAINT [FK__Referrals__Refer__6EC0713C]
GO
ALTER TABLE [dbo].[Referrals]  WITH CHECK ADD FOREIGN KEY([ReferralEnteredByStaffID])
REFERENCES [dbo].[Staff] ([ID])
ON UPDATE CASCADE
ON DELETE SET NULL
GO
ALTER TABLE [dbo].[ReferralSettings]  WITH CHECK ADD FOREIGN KEY([SettingValueType])
REFERENCES [dbo].[SettingValueTypes] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[WebOptions]  WITH CHECK ADD FOREIGN KEY([WebOptionGroupID])
REFERENCES [dbo].[WebOptionGroups] ([ID])
GO
ALTER TABLE [dbo].[WebPermissions]  WITH CHECK ADD FOREIGN KEY([WebPermissionGroupID])
REFERENCES [dbo].[WebPermissionGroups] ([ID])
GO
ALTER TABLE [dbo].[WebUserOptions]  WITH CHECK ADD FOREIGN KEY([WebOptionID])
REFERENCES [dbo].[WebOptions] ([ID])
GO
ALTER TABLE [dbo].[WebUserOptions]  WITH CHECK ADD FOREIGN KEY([WebUserID])
REFERENCES [dbo].[WebUsers] ([ID])
GO
ALTER TABLE [dbo].[WebUserOptions]  WITH CHECK ADD FOREIGN KEY([WebUserID])
REFERENCES [dbo].[WebUsers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[WebUserPermissions]  WITH CHECK ADD FOREIGN KEY([WebPermissionID])
REFERENCES [dbo].[WebPermissions] ([ID])
GO
ALTER TABLE [dbo].[WebUserPermissions]  WITH CHECK ADD FOREIGN KEY([WebUserID])
REFERENCES [dbo].[WebUsers] ([ID])
GO
ALTER TABLE [dbo].[WebUserPermissions]  WITH CHECK ADD FOREIGN KEY([WebUserID])
REFERENCES [dbo].[WebUsers] ([ID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[WebUsers]  WITH CHECK ADD FOREIGN KEY([StaffID])
REFERENCES [dbo].[Staff] ([ID])
GO
/****** Object:  StoredProcedure [dbo].[FailedHoursBreakdownsByCase]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
	
	
	
	
	
CREATE PROCEDURE [dbo].[FailedHoursBreakdownsByCase] (@InsuranceID INT) AS

	/* TEST DATA
		DECLARE @InsuranceID INT = 73
	-- */

	SELECT 
		x.InsuranceID,
		x.InsuranceName,
		COUNT(*) AS CountOfEntries,
		x.CaseID, 
		p.PatientFirstName,
		p.PatientLastName,
		MIN(x.HoursDate) AS MinFailureDate,
		MAX(x.HoursDate) AS MaxFailureDate
	FROM dbo.FailedHoursBreakdowns AS x
	INNER JOIN dbo.Cases AS c ON c.ID = x.CaseID
	INNER JOIN dbo.Patients AS p ON p.ID = c.PatientID
	WHERE x.InsuranceID = @InsuranceID
	GROUP BY 
		x.InsuranceID,
		x.InsuranceName,
		x.CaseID,
		p.PatientFirstName,
		p.PatientLastName
	ORDER BY COUNT(*) DESC
	;
	

GO
/****** Object:  StoredProcedure [dbo].[GenerateWebUserOptions]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GenerateWebUserOptions] (@UserID INT) AS

	/* TEST DATA
	DECLARE @UserID INT
	SET @UserID = 1
	-- */
	
	INSERT INTO dbo.WebUserOptions (WebUserID, WebOptionID)
		SELECT @UserID, o.ID
		FROM dbo.WebOptions AS o
		LEFT JOIN (
			SELECT t.*
			FROM dbo.WebUserOptions AS t
			WHERE t.WebUserID = @UserID
		) AS op ON o.ID = op.WebOptionID
		WHERE op.ID IS NULL

GO
/****** Object:  StoredProcedure [dbo].[GenerateWebUserPermissions]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- SPROCS FOR USER PERMISSIONS/OPTIONS
-- ============================
 CREATE PROCEDURE [dbo].[GenerateWebUserPermissions] (@UserID INT) AS
	/* TEST DATA
	DECLARE @UserID INT
	SET @UserID = 1
	-- */

	INSERT INTO dbo.WebUserPermissions (WebUserID, WebPermissionID, isAllowed)
		SELECT @UserID, p.ID, 0
		FROM dbo.WebPermissions AS p 
		LEFT JOIN (
			SELECT t.*
			FROM dbo.WebUserPermissions AS t
			WHERE t.WebUserID = @UserID
		) AS up ON p.ID = up.WebPermissionID
		WHERE up.ID IS NULL


GO
/****** Object:  StoredProcedure [dbo].[GenerateWebUserPermissionsForAll]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
  -- ============================
-- Add a procedure to generate permissions for all users
-- ============================

CREATE PROCEDURE [dbo].[GenerateWebUserPermissionsForAll] AS BEGIN

	INSERT INTO dbo.WebUserPermissions (WebUserID, WebPermissionID, isAllowed)
		SELECT 
			matrix.UserID, 
			matrix.PermissionID, 
			0
		 FROM (
			SELECT u.ID AS UserID, p.ID AS PermissionID
			FROM dbo.WebPermissions AS p
			CROSS JOIN dbo.WebUsers AS u
		) AS matrix LEFT JOIN dbo.WebUserPermissions AS up ON up.WebUserID = matrix.UserID AND up.WebPermissionID = matrix.PermissionID
		WHERE up.ID IS NULL

END

GO
/****** Object:  StoredProcedure [dbo].[GetBilledHoursByMonthByProviderType]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- /*	
CREATE PROCEDURE [dbo].[GetBilledHoursByMonthByProviderType](
	@CaseID INT, 
	@StartDate DATE, 
	@EndDate DATE
) AS BEGIN
-- */

	 /* TEST DATA
	DECLARE @CaseID INT
	DECLARE @StartDate DATE
	DECLARE @EndDate DATE

	SET @CaseID = 386
	SET @StartDate = '2016-01-01'
	SET @EndDate = '2016-12-31'
	-- */
	
	DECLARE @NumMonths INT
	SET @NumMonths = dbo.FullMonthsSeparation(@StartDate, @EndDate)

	SELECT 
		dates.Period AS MonthStart, 
		data.BCBAHours, 
		data.AideHours, 
		data.TotalHours
	
	FROM (

		SELECT 
			pvt.Period AS MonthStart, 
			COALESCE(pvt.BCBA, 0) AS BCBAHours, 
			COALESCE(pvt.Aide, 0) AS AideHours,
			COALESCE(pvt.BCBA, 0) + COALESCE(pvt.Aide, 0) AS TotalHours
		FROM (
			SELECT 
				DATEADD(MONTH, DATEDIFF(MONTH, 0, h.HoursDate), 0) AS Period, 
				pt.ProviderTypeCode,
				SUM(COALESCE(h.HoursBillable, 0)) AS BilledHours
			FROM dbo.CaseAuthHours AS h
			INNER JOIN dbo.Providers AS p ON p.ID = h.CaseProviderID
			INNER JOIN dbo.ProviderTypes AS pt ON pt.ID = p.ProviderType
			WHERE h.HoursDate >= @StartDate
				AND h.HoursDate <= @EndDate
				AND h.HoursBillingRef IS NOT NULL
				AND h.CaseID = @CaseID
				AND pt.ProviderTypeCode IN ('BCBA', 'AIDE')
			GROUP BY 
				DATEADD(MONTH, DATEDIFF(MONTH, 0, h.HoursDate), 0), 
				pt.ProviderTypeCode
		) AS src
		-- /*
		PIVOT (
			SUM(src.BilledHours)
			FOR src.ProviderTypeCode IN ([BCBA], [AIDE])
		) AS pvt
		-- */

	) data

	RIGHT JOIN (

		SELECT Number, DATEADD(MONTH, Number - 1, @StartDate) AS Period
		FROM dbo.Numbers 
		WHERE Number <= @NumMonths + 1

	) AS dates ON dates.Period = data.MonthStart

	RETURN

-- /*
END
-- */

GO
/****** Object:  StoredProcedure [dbo].[GetCaseMonthlyPeriods]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- Create a sproc to get months of a specified case and range
-- ============================
CREATE PROCEDURE [dbo].[GetCaseMonthlyPeriods](@CaseID INT, @StartDate DATETIME, @EndDate DATETIME) AS BEGIN

	 /* TEST DATA
	DECLARE @CaseID INT
	DECLARE @StartDate DATETIME
	DECLARE @EndDate DATETIME
	-- */

	DECLARE @MonthDiff INT

	 /* TEST DATA
	SET @CaseID = 383
	SET @StartDate = '2015-12-05'
	SET @EndDate = '2016-06-05'
	-- */

	-- align provider start/end date with first day of month
	SET @StartDate = DATEADD(MONTH, DATEDIFF(MONTH, 0, @StartDate), 0)
	SET @EndDate = DATEADD(MONTH, DATEDIFF(MONTH, 0, @EndDate), 0)
	-- get the number of months difference
	SET @MonthDiff = DATEDIFF(MONTH, @StartDate, @EndDate) + 1

	SELECT
		g.ID, 
		g.PeriodFirstDayOfMonth
	FROM (
		-- retrieve existing entries in range
		SELECT
			p.ID,
			p.PeriodFirstDayOfMonth
		FROM dbo.CaseMonthlyPeriods AS p
		WHERE p.CaseID = @CaseID 
			AND p.PeriodFirstDayOfMonth >= @StartDate 
			AND p.PeriodFirstDayOfMonth <= @EndDate

		UNION

		-- generate gap fillers that don't exist in range
		SELECT
			NULL AS ID,
			DATEADD(MONTH, n.Number - 1, @StartDate) AS GeneratedDate
		FROM dbo.Numbers AS n
		WHERE n.Number <= @MonthDiff 
			AND NOT EXISTS(
				SELECT 1 
				FROM dbo.CaseMonthlyPeriods AS t 
				WHERE t.CaseID = @CaseID 
					AND t.PeriodFirstDayOfMonth >= @StartDate
					AND t.PeriodFirstDayOfMonth <= @EndDate
					AND t.PeriodFirstDayOfMonth = DATEADD(MONTH, n.Number - 1, @StartDate)
			)
	) AS g
	ORDER BY g.PeriodFirstDayOfMonth;

	RETURN

END

GO
/****** Object:  StoredProcedure [dbo].[GetCasesWithAuthsButNotHours]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




-- ============================
-- Cases with Auths but no Hours
-- (Alter to ignore historic cases)
-- ============================
CREATE PROCEDURE [dbo].[GetCasesWithAuthsButNotHours](@StartDate DATETIME2, @EndDate DATETIME2) AS

	/* -- TEST DATA
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = '2016-08-01'
	SET @EndDate = '2016-08-30'
	-- */


	SELECT 
		c.ID AS CaseID,
		p.ID AS PatientID,
		p.PatientFirstName,
		p.PatientLastName,
		cmp.WatchComment,
		cmp.WatchIgnore
	FROM dbo.Cases AS c
	INNER JOIN dbo.Patients AS p ON c.PatientID = p.ID
	LEFT JOIN dbo.CaseMonthlyPeriods AS cmp 
		ON cmp.CaseID = c.ID
		AND cmp.PeriodFirstDayOfMonth = @StartDate
	INNER JOIN (
	
		SELECT 
			c.ID AS CaseID
		FROM dbo.Cases AS c
		INNER JOIN dbo.CaseAuthCodes AS cac ON cac.CaseID = c.ID
		LEFT JOIN dbo.CaseAuthHours AS cah ON cah.CaseID = c.ID

		WHERE cac.AuthStartDate <= @EndDate
			AND cac.AuthEndDate <= @StartDate

		GROUP BY c.ID

		HAVING COUNT(cah.ID) = 0

	) AS unmatched ON unmatched.CaseID = c.ID

	WHERE c.CaseStatus >= 0

	RETURN


GO
/****** Object:  StoredProcedure [dbo].[GetCasesWithHoursButNoAideHours]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- Cases with Hours but no AIDE Billing
-- ============================
CREATE PROCEDURE [dbo].[GetCasesWithHoursButNoAideHours](@StartDate DATETIME2, @EndDate DATETIME2) AS

	/*  --TEST DATA
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = '2016-07-01'
	SET @EndDate = '2016-07-30'
	-- */
	SELECT 		
		C.ID AS CaseID,
		P.ID AS PatientID,
		P.PatientLastName,
		P.PatientFirstName,
		BCBA.ProviderLastName,
		BCBA.ProviderFirstName,
		CMP.WatchComment,
		CMP.WatchIgnore 
	FROM Cases AS C INNER JOIN dbo.Patients AS P ON C.PatientID = P.ID
					LEFT JOIN dbo.CaseMonthlyPeriods AS CMP ON CMP.CaseID = c.ID AND CMP.PeriodFirstDayOfMonth = @StartDate
					LEFT JOIN (
						SELECT 
						CP.CaseID AS CaseID,
						Providers.ID AS ProviderID,
						Providers.ProviderLastName,
						Providers.ProviderFirstName
						FROM dbo.GetActiveCaseProviders(@StartDate,@EndDate) AS CP INNER JOIN Providers ON CP.ProviderID = Providers.ID
						WHERE ProviderType = 15
					 ) AS BCBA ON BCBA.CaseID = c.ID
	WHERE C.ID IN (
		-- Cases with :
		--   - no Aide hours in the requested period
		--   - reported by active providers in the requested period
		--   - with hours reported in the requested period
		SELECT H.CaseID FROM CaseAuthHours as H
		WHERE H.CaseId NOT IN(
			-- CaseId of Reported Hours by Aides in the requested period
			SELECT        CaseId
			FROM            CaseAuthHours AS CAH 
				INNER JOIN Providers AS PR ON CAH.CaseProviderID = PR.ID
				INNER JOIN dbo.ProviderTypes AS pt ON pt.ID = pr.ProviderType
			WHERE pt.ProviderTypeCode = 'AIDE' AND CAH.HoursDate >= @StartDate AND  CAH.HoursDate <= @EndDate
		) 		
		AND EXISTS(SELECT * FROM dbo.GetActiveCaseProviders(@StartDate,@EndDate) WHERE CaseId = H.CaseID AND ProviderId = H.CaseProviderID)
		AND H.HoursDate >= @StartDate AND  H.HoursDate <= @EndDate
	)
	ORDER BY PatientLastName, PatientFirstName, ProviderLastName, ProviderFirstName
	RETURN

GO
/****** Object:  StoredProcedure [dbo].[GetCasesWithHoursButNoBCBAHours]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ============================
-- Cases with Hours but no BCBA Billing
-- ============================
  CREATE PROCEDURE [dbo].[GetCasesWithHoursButNoBCBAHours](@StartDate DATE, @EndDate DATE) AS

	/* -- TEST DATA
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = '2016-08-01'
	SET @EndDate = '2016-08-30'
	-- */

	SELECT 		
		C.ID AS CaseID,
		P.ID AS PatientID,
		P.PatientLastName,
		P.PatientFirstName,
		BCBA.ProviderLastName,
		BCBA.ProviderFirstName,
		CMP.WatchComment,
		CMP.WatchIgnore 
	FROM Cases AS C INNER JOIN dbo.Patients AS P ON C.PatientID = P.ID
					LEFT JOIN dbo.CaseMonthlyPeriods AS CMP ON CMP.CaseID = c.ID AND CMP.PeriodFirstDayOfMonth = @StartDate
					LEFT JOIN (
						SELECT 
						CP.CaseID AS CaseID,
						Providers.ID AS ProviderID,
						Providers.ProviderLastName,
						Providers.ProviderFirstName
						FROM dbo.GetActiveCaseProviders(@StartDate,@EndDate) AS CP INNER JOIN Providers ON CP.ProviderID = Providers.ID
						WHERE ProviderType = 15
					 ) AS BCBA ON BCBA.CaseID = c.ID
	WHERE C.ID IN (
		-- Cases with :
		--   - no BCBA hours in the requested period
		--   - reported by active providers in the requested period
		--   - with hours reported in the requested period
		SELECT H.CaseID FROM CaseAuthHours as H
		WHERE H.CaseId NOT IN(
			-- CaseId of Reported Hours by BCBAs in the requested period
			SELECT        CaseId
			FROM            CaseAuthHours AS CAH INNER JOIN Providers AS PR ON CAH.CaseProviderID = PR.ID
			WHERE PR.ProviderType = 15 AND CAH.HoursDate >= @StartDate AND  CAH.HoursDate <= @EndDate
		)
		AND EXISTS(SELECT * FROM dbo.GetActiveCaseProviders(@StartDate,@EndDate) WHERE CaseId = H.CaseID AND ProviderId = H.CaseProviderID)
		AND H.HoursDate >= @StartDate AND  H.HoursDate <= @EndDate
	)
	ORDER BY PatientLastName, PatientFirstName, ProviderLastName, ProviderFirstName
RETURN

GO
/****** Object:  StoredProcedure [dbo].[GetCasesWithHoursButNoSupervision]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- Cases with Hours but no Direct Supervision
-- ============================
CREATE PROCEDURE [dbo].[GetCasesWithHoursButNoSupervision](@StartDate DATETIME2, @EndDate DATETIME2) AS

	/*-- TEST DATA
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = '2017-08-01'
	SET @EndDate = '2017-08-31'
	--*/

	SELECT 		
		C.ID AS CaseID,
		P.ID AS PatientID,
		P.PatientLastName,
		P.PatientFirstName,
		BCBA.ProviderLastName,
		BCBA.ProviderFirstName,
		CMP.WatchComment,
		CMP.WatchIgnore 
	FROM Cases AS C INNER JOIN dbo.Patients AS P ON C.PatientID = P.ID
					LEFT JOIN dbo.CaseMonthlyPeriods AS CMP ON CMP.CaseID = c.ID AND CMP.PeriodFirstDayOfMonth = @StartDate
					LEFT JOIN (
						SELECT 
						CP.CaseID AS CaseID,
						Providers.ID AS ProviderID,
						Providers.ProviderLastName,
						Providers.ProviderFirstName
						FROM dbo.GetActiveCaseProviders(@StartDate,@EndDate) AS CP INNER JOIN Providers ON CP.ProviderID = Providers.ID
						WHERE ProviderType = 15
					 ) AS BCBA ON BCBA.CaseID = c.ID
	WHERE C.ID IN (
		-- Cases with :
		--   - no supervision hours in the requested period
		--   - reported by active providers in the requested period
		--   - with hours reported in the requested period
		SELECT H.CaseID FROM CaseAuthHours as H
		WHERE H.CaseId NOT IN(
			-- CaseId of Reported Hours of Supervision in the requested period
			SELECT CAH.CaseID
			FROM CaseAuthHours AS CAH
			INNER JOIN Providers AS p ON CAH.CaseProviderID = p.ID
			INNER JOIN ProviderTypes AS pt ON pt.ID = p.ProviderType
			INNER JOIN Services AS s ON s.ID = CAH.HoursServiceID
			WHERE pt.ProviderTypeCode = 'BCBA'
				AND CAH.HoursDate >= @StartDate
				AND CAH.HoursDate <= @EndDate
				AND s.ServiceCode = 'DSU'
		)
		AND EXISTS(SELECT * FROM dbo.GetActiveCaseProviders(@StartDate,@EndDate) WHERE CaseId = H.CaseID AND ProviderId = H.CaseProviderID)
		AND H.HoursDate >= @StartDate AND  H.HoursDate <= @EndDate
	)
	ORDER BY PatientLastName, PatientFirstName, ProviderLastName, ProviderFirstName
	RETURN

GO
/****** Object:  StoredProcedure [dbo].[GetCaseTimeScrubOverview]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- ============================
-- Update Scrub Sproc to include hours totals and BCBA percent
-- ============================

CREATE PROCEDURE [dbo].[GetCaseTimeScrubOverview](@StartDate DATETIME2, @EndDate DATETIME2) AS BEGIN
	
	/* TEST DATA 
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2
	SET @StartDate = '2016/06/01';
	SET @EndDate = '2016/06/30';
	-- */
	
	SELECT
		c.ID AS CaseID,
		p.PatientFirstName,
		p.PatientLastName,
		COUNT(DISTINCT ppc.ProviderID) AS CountOfActiveProviders,
		COUNT(DISTINCT cpwh.ProviderID) AS CountOfProvidersWithHours,
		COUNT(DISTINCT cpf.ProviderID) AS CountOfProvidersFinalized,
		COALESCE(srpc.CountOfScrubbedRecordsPerCase, 0) AS CountOfScrubbedRecords,
		COALESCE(usrpc.CountOfUnscrubbedRecordsPerCase, 0) AS CountOfUnscrubbedRecords,
		COALESCE(crpc.CountOfCommittedRecordsPerCase, 0) AS CountOfCommittedRecords,
		COALESCE(brpc.CountOfBilledRecordsPerCase, 0) AS CountOfBilledRecords,
		COALESCE(prpc.CountOfPaidRecordsPerCase, 0) AS CountOfPaidRecords,
		COALESCE(hcth.TotalPayable, 0) AS TotalPayable,
		COALESCE(hcth.TotalBillable, 0) AS TotalBillable,
		COALESCE(hcbh.BCBABillable, 0) AS BCBABillable,
		COALESCE(hcth.TotalBillable, 0) - COALESCE(hcbh.BCBABillable, 0) AS AideBillable,
		(CASE 
			WHEN COALESCE(hcth.TotalBillable, 0) = 0 THEN 0 
			ELSE CAST(COALESCE(hcbh.BCBABillable, 0) / hcth.TotalBillable * 100 AS INT)
			END) AS BCBAPercent
	FROM dbo.Patients AS p
	INNER JOIN dbo.Cases AS c ON p.ID = c.PatientID
	LEFT JOIN (
		-- active providers per case
		SELECT 
			cp.CaseID AS CaseID,
			p.ID AS ProviderID			
		FROM dbo.CaseProviders AS cp
		INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
		WHERE cp.Active = 1
	) ppc ON c.ID = ppc.CaseID
	LEFT JOIN (
		-- providers with hours per case
		SELECT 
			cah.CaseID AS CaseID,
			cah.CaseProviderID AS ProviderID			
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
	) AS cpwh ON c.ID = cpwh.CaseID
	LEFT JOIN (
		-- case period finalizations in the specified range
		SELECT
			cmp.ID AS PeriodID,
			cmp.CaseID,
			cmppf.ProviderID
		FROM dbo.CaseMonthlyPeriods AS cmp
		INNER JOIN dbo.CaseMonthlyPeriodProviderFinalizations AS cmppf ON cmp.ID = cmppf.CaseMonthlyPeriodID
		WHERE cmp.PeriodFirstDayOfMonth >= @StartDate AND cmp.PeriodFirstDayOfMonth <= @EndDate
	) AS cpf ON c.ID = cpf.CaseID
	LEFT JOIN (
		-- scrubbed records per case
		SELECT
			cah.CaseID,
			COUNT(*) AS CountOfScrubbedRecordsPerCase
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.HoursStatus = 3
			AND cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
		GROUP BY cah.CaseID
	) AS srpc ON c.ID = srpc.CaseID
	LEFT JOIN (
		-- billed records per case
		SELECT
			cah.CaseID AS CaseID,
			COUNT(*) AS CountOfBilledRecordsPerCase
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.HoursDate >= @StartDate 
			AND cah.HoursDate <= @EndDate
			AND cah.HoursBillingRef IS NOT NULL
		GROUP BY cah.CaseID
	) AS brpc ON c.ID = brpc.CaseID
	LEFT JOIN (
		SELECT cah.CaseID AS CaseID,
		COUNT(*) AS CountOfPaidRecordsPerCase
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.HoursDate >= @StartDate 
			AND cah.HoursDate <= @EndDate
			AND cah.HoursPayableRef IS NOT NULL
		GROUP BY cah.CaseID
	) AS prpc ON c.ID = prpc.CaseID
	LEFT JOIN (
		-- unscrubbed records per case
		SELECT
			COALESCE(cah.CaseID, cac.CaseID) AS CaseID,
			COUNT(*) AS CountOfUnscrubbedRecordsPerCase
		FROM dbo.CaseAuthHours AS cah
		LEFT JOIN dbo.CaseAuthCodes AS cac ON cah.CaseAuthID = cac.ID
		WHERE cah.HoursStatus < 3
			AND cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
		GROUP BY COALESCE(cah.CaseID, cac.CaseID)
	) AS usrpc ON c.ID = usrpc.CaseID
	LEFT JOIN (
		-- committed records per case
		SELECT
			cah.CaseID,
			COUNT(*) AS CountOfCommittedRecordsPerCase
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.HoursStatus = 1
			AND cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
		GROUP BY cah.CaseID
	) AS crpc ON c.ID = crpc.CaseID
	LEFT JOIN (
		-- hours count, total hours
		SELECT
			cah.CaseID,
			SUM(cah.HoursBillable) AS TotalBillable,
			SUM(cah.HoursPayable) AS TotalPayable
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.HoursStatus >= 2
			AND cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
		GROUP BY cah.CaseID
	) AS hcth ON c.ID = hcth.CaseID
	LEFT JOIN (
		-- hours count, bcba hours (supervisor)
		SELECT
			cah.CaseID,
			SUM(cah.HoursBillable) AS BCBABillable
		FROM dbo.CaseAuthHours AS cah
		INNER JOIN dbo.CaseProviders AS cp ON cah.CaseProviderID = cp.ProviderID AND cp.CaseID = cah.CaseID
		WHERE cah.HoursStatus >= 2
			AND cah.HoursDate >= @StartDate AND cah.HoursDate <= @EndDate
			AND cp.IsSupervisor = 1
		GROUP BY cah.CaseID
	) AS hcbh ON c.ID = hcbh.CaseID


	GROUP BY 
		c.ID, 
		p.PatientFirstName, 
		p.PatientLastName,
		COALESCE(srpc.CountOfScrubbedRecordsPerCase, 0),
		COALESCE(usrpc.CountOfUnscrubbedRecordsPerCase, 0),
		COALESCE(crpc.CountOfCommittedRecordsPerCase, 0),
		COALESCE(brpc.CountOfBilledRecordsPerCase, 0),
		COALESCE(prpc.CountOfPaidRecordsPerCase, 0), 
		COALESCE(hcth.TotalPayable, 0),
		COALESCE(hcth.TotalBillable, 0),
		COALESCE(hcbh.BCBABillable, 0),
		COALESCE(hcth.TotalBillable, 0) - COALESCE(hcbh.BCBABillable, 0),
		(CASE 
			WHEN COALESCE(hcth.TotalBillable, 0) = 0 THEN 0 
			ELSE CAST(COALESCE(hcbh.BCBABillable, 0) / hcth.TotalBillable * 100 AS INT)
			END)
		;

	
	RETURN
 END



GO
/****** Object:  StoredProcedure [dbo].[GetCatalystDataMissingReportByProviderAndCase]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- Create proc for getting Catalyst No Data by Provider, Case
-- (edit) return only AIDEs, return only non-data dates in list
-- ============================

CREATE PROCEDURE [dbo].[GetCatalystDataMissingReportByProviderAndCase](
	@StartDate DATETIME2, 
	@EndDate DATETIME2
	) AS
BEGIN

	 /*	TEST DATA
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = '2016-07-01'
	SET @EndDate = '2016-07-31'
	-- */

	SELECT 
		base.*,
		dates = STUFF((
				SELECT ', ' + LEFT(CONVERT(NVARCHAR, t.HoursDate, 120), 10)
				FROM dbo.CaseAuthHours AS t
				WHERE t.CaseID = base.CaseID 
					AND t.CaseProviderID = base.ProviderID
					AND t.HoursDate >= @StartDate
					AND t.HoursDate <= @EndDate
					AND t.HoursHasCatalystData = 0
				ORDER BY t.HoursDate
				FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '')
	
	FROM (

		SELECT 
			c.ID AS CaseID,
			p.ID AS ProviderID,
			p.ProviderFirstName,
			p.ProviderLastName,
			ptn.PatientFirstname,
			ptn.PatientLastName,
			p.ProviderPrimaryEmail,
			p.ProviderPrimaryPhone

			
		

		FROM dbo.CaseAuthHours AS cah
			INNER JOIN dbo.Cases AS c ON cah.CaseID = c.ID
			INNER JOIN dbo.Patients AS ptn ON c.PatientID = ptn.ID
			INNER JOIN dbo.Providers AS p ON p.ID = cah.CaseProviderID
			INNER JOIN dbo.ProviderTypes AS pt ON pt.ID = p.ProviderType
		
		WHERE cah.HoursDate >= @StartDate
			AND cah.HoursDate <= @EndDate
			AND cah.HoursHasCatalystData = 0
			AND pt.ProviderTypeCode = 'AIDE'

		GROUP BY 
			c.ID,
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName,
			ptn.PatientFirstname,
			ptn.PatientLastName,
			p.ProviderPrimaryEmail,
			p.ProviderPrimaryPhone

	) AS base

	ORDER BY
		base.ProviderFirstName,
		base.ProviderLastName,
		base.PatientFirstname,
		base.PatientLastName
		
	RETURN

END


GO
/****** Object:  StoredProcedure [dbo].[GetDetailedHoursByPeriod]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




	
	

-- ============================
-- Sproc to return detailed hours info (not done via client LINQ for performance reasons...)
-- Update to handle extended notes indicator
-- ============================

CREATE PROCEDURE [dbo].[GetDetailedHoursByPeriod](@StartDate DATETIME2, @EndDate DATETIME2, @MinStatus INT) AS

	 /* TEST DATA 
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2
	DECLARE @MinStatus INT	-- set to 2 for finalized only, or 0 for all

	SET @StartDate = '2016-07-01'
	SET @EndDate = '2016-07-31'
	SET @MinStatus = 2
	-- */

	SELECT 
		cah.ID ,
		cah.DateCreated ,
		cah.rv ,
		cah.CaseAuthID ,
		cah.CaseProviderID ,
		cah.HoursDate ,
		cah.HoursTimeIn ,
		cah.HoursTimeOut ,
		cah.HoursTotal ,
		cah.HoursServiceID ,
		cah.HoursNotes ,
		CASE WHEN Exists(Select * From CaseAuthHoursNotes Where HoursID = cah.ID)
			THEN 1
			ELSE 0
		END AS HasExtendedNotes,
		cah.CaseID ,
		cah.HoursStatus ,
		cah.HoursBillable ,
		cah.HoursPayable ,
		cah.HoursBillingRef ,
		cah.HoursPayableRef ,
		cah.HoursHasCatalystData ,
		cah.HoursWatchEnabled ,
		cah.HoursWatchNote ,
		cah.HoursSSGParentID ,
		cah.HoursCorrelationID ,
		cah.HoursInternalNotes ,
		cah.IsPayrollOrBillingAdjustment ,
		cah.ServiceLocationID,
		pt.PatientFirstName + ' ' + pt.PatientLastName AS PatientName,
		p.ProviderFirstName + ' ' + p.ProviderLastName AS ProviderName,
		s.ServiceCode,
		ac.CodeCode AS AuthCode

	FROM dbo.caseAuthHours AS cah
	INNER JOIN dbo.Cases AS c ON cah.CaseID = c.ID
	INNER JOIN dbo.Patients AS pt ON c.PatientID = pt.ID
	INNER JOIN dbo.Providers AS p ON cah.CaseProviderID = p.ID
	LEFT JOIN dbo.Services AS s ON cah.HoursServiceID = s.ID
	LEFT JOIN dbo.CaseAuthCodes AS cac ON cah.CaseAuthID = cac.ID
	LEFT JOIN dbo.AuthCodes AS ac ON cac.AuthCodeID = ac.ID

	WHERE cah.HoursDate >= @StartDate
		AND cah.HoursDate <= @EndDate
		AND cah.HoursStatus >= @MinStatus

	ORDER BY pt.PatientFirstName + ' ' + pt.PatientLastName,
		p.ProviderFirstName + ' ' + p.ProviderLastName,
		cah.HoursDate DESC,
		cah.HoursTimeIn,
		cah.HoursTimeOut

	RETURN



GO
/****** Object:  StoredProcedure [dbo].[GetDischargedPatientSearchViewData]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetDischargedPatientSearchViewData](@ABATypeID INT) AS BEGIN
	/* TEST DATA
	DECLARE @ABATypeID INT
	SET @ABATypeID = (SELECT ID FROM dbo.ProviderTypes WHERE ProviderTypeCode = 'AIDE')
	-- */

	SELECT
		c.ID,
		p.ID AS PatientID,
		p.PatientFirstName AS FirstName,
		p.PatientLastName AS LastName,
		p.PatientCity,
		p.PatientState,
		p.PatientZip AS Zip,
		c.CaseStatus AS Status,
		c.CaseStatusReason AS StatusReason,
		c.CaseStartDate AS StartDate,
		auth.LatestEndDate AS EndingAuthDate,
		c.CaseHasPrescription AS HasPrescription,
		c.CaseHasAssessment AS HasAssessment,
		c.CaseHasIntake AS HasIntake,
		CASE WHEN sup.CaseID IS NOT NULL THEN 1 ELSE 0 END AS HasSupervisor,
		sup.ProviderID AS PrimaryBCBAID,
		sup.ProviderFirstName AS BCBAFirstName,
		sup.ProviderLastName AS BCBALastName,
		aide.ProviderID AS PrimaryAideID,
		aide.ProviderFirstName AS AideFirstName,
		aide.ProviderLastName AS AideLastName,
		-- p.PatientInsuranceCompanyName,
		i.InsuranceName AS PatientInsuranceCompanyName,
		s.ID AS AssignedStaffID,
		s.StaffFirstName AS AssignedStaffFirstName,
		s.StaffLastName AS AssignedStaffLastName,
		c.CaseNeedsStaffing AS NeedsStaffing,
		c.CaseNeedsRestaffing AS NeedsRestaffing,
		c.CaseRestaffingReason AS RestaffingReason
		
	FROM dbo.Patients AS p
	INNER JOIN dbo.Cases AS c ON p.ID = c.PatientID

	LEFT JOIN dbo.PatientCurrentInsurance AS pci ON c.ID = pci.CaseID

	LEFT JOIN dbo.Insurances AS i ON i.ID = pci.InsuranceID

	LEFT JOIN (
		SELECT base.CaseID, base.ProviderID, tmp.ProviderFirstName, tmp.ProviderLastName
		FROM (
			SELECT 
				cp.CaseID,
				MAX(subP.ID) AS ProviderID			
			FROM dbo.CaseProviders AS cp 
			INNER JOIN dbo.Providers AS subP ON cp.ProviderID = subP.ID
			WHERE cp.Active = 1 AND cp.IsSupervisor = 1 
			GROUP BY cp.CaseID
		) AS base
		INNER JOIN dbo.Providers AS tmp ON base.ProviderID = tmp.ID
	) AS sup ON sup.CaseID = c.ID

	LEFT JOIN (
		SELECT
			cac.CaseID,
			MAX(cac.AuthEndDate) AS LatestEndDate
		FROM dbo.CaseAuthCodes AS cac
		WHERE cac.AuthEndDate IS NOT NULL
		GROUP BY cac.CaseID
	) AS auth ON c.ID = auth.CaseID

	LEFT JOIN (
		SELECT base.CaseID, base.ProviderID, tmp.ProviderFirstName, tmp.ProviderLastName
		FROM (
			SELECT
				cp.CaseID,
				MIN(subP.ID) AS ProviderID		
			FROM dbo.CaseProviders AS cp 
			INNER JOIN dbo.Providers AS subP ON cp.ProviderID = subP.ID
			WHERE cp.Active = 1 AND subP.ProviderType = @ABATypeID
			GROUP BY cp.CaseID
		) AS base
		INNER JOIN dbo.Providers AS tmp ON base.ProviderID = tmp.ID
	) AS aide ON aide.CaseID = c.ID

	LEFT JOIN dbo.Staff AS s ON s.ID = c.CaseAssignedStaffID

	WHERE c.CaseStatus = -1

	ORDER BY LastName, FirstName;

	RETURN
	END

GO
/****** Object:  StoredProcedure [dbo].[GetHoursAuthBreakdownByCase]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







-- ============================
-- Procedure to view the application of time 
-- to different auths for hours of a case
-- ============================
CREATE PROCEDURE [dbo].[GetHoursAuthBreakdownByCase](@StartDate DATE, @EndDate DATE, @CaseID INT) AS

	 /*	TEST DATA
	DECLARE @StartDate DATE = '2017-02-01'
	DECLARE @EndDate DATE = '2017-03-01'
	DECLARE @CaseID INT = 491
	-- */

	SELECT 
		hoursBase.*,
		breakdowns.AuthCode,
		breakdowns.Minutes
	FROM (
		SELECT 
			ROW_NUMBER() OVER (ORDER BY cah.HoursDate) AS HoursNumber,
			cah.ID AS HoursID,
			cah.HoursDate,
			p.ProviderFirstName + ' ' + p.ProviderLastName AS ProviderName,
			s.ServiceCode,
			pt.ProviderTypeCode AS ProviderType
		FROM dbo.CaseAuthHours AS cah
		INNER JOIN dbo.Services AS s ON s.ID = cah.HoursServiceID
		INNER JOIN dbo.Providers AS p ON p.ID = cah.CaseProviderID
		INNER JOIN dbo.ProviderTypes AS pt ON pt.ID = p.ProviderType

		WHERE cah.HoursDate >= @StartDate
			AND cah.HoursDate < @EndDate
			AND cah.CaseID = @CaseID

	) AS hoursBase

	INNER JOIN (

		SELECT 
			bd.HoursID,
			ac.CodeCode AS AuthCode,
			bd.Minutes
		FROM dbo.CaseAuthHoursBreakdown AS bd
		INNER JOIN dbo.CaseAuthCodes AS cac ON cac.ID = bd.CaseAuthID
		INNER JOIN dbo.AuthCodes AS ac ON ac.ID = cac.AuthCodeID

	) AS breakdowns ON breakdowns.HoursID = hoursBase.HoursID

	ORDER BY hoursBase.HoursDate;


GO
/****** Object:  StoredProcedure [dbo].[GetHoursForDownload]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetHoursForDownload] (@ProviderID INT, @CaseID INT, @Month INT, @Year INT)
AS BEGIN

	SELECT
		stat.StatusName,
		cah.HoursDate,
		cah.HoursTimeIn,
		cah.HoursTimeOut,
		cah.HoursTotal,
		serv.ServiceCode,
		cah.HoursNotes,

		STUFF(
			(SELECT ' | ' + tmp.TemplateText + ': ' + can.NotesAnswer
			 FROM CaseAuthHoursNotes as can
			 INNER JOIN HoursNoteTemplates as tmp
				ON tmp.ID = can.NotesTemplateID
			 WHERE HoursID = cah.ID
			 AND NotesAnswer IS NOT NULL
			 FOR XML PATH (''))
		, 1, 1, '') as ExtendedNotes

	FROM 
		CaseAuthHours as cah
	INNER JOIN
		CaseAuthHoursStatuses as stat
		on cah.HoursStatus = stat.ID
	inner join
		[Services] as serv
		on serv.ID = cah.HoursServiceID

	where cah.CaseProviderID = @ProviderID
	and cah.CaseID = @CaseID

	and MONTH(cah.HoursDate) = @Month
	and YEAR(cah.HoursDate) = @Year

	order by cah.HoursDate asc, HoursTimeIn asc;

RETURN

END
	
	
GO
/****** Object:  StoredProcedure [dbo].[GetHoursScrubSummaryProviders]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

   
-- ============================
-- Hours Scrub Summary Sproc
-- ============================

CREATE PROCEDURE [dbo].[GetHoursScrubSummaryProviders] (@CaseID INT, @StartDate DATETIME2, @EndDate DATETIME2) AS BEGIN

	/* TEST DATA
	DECLARE @CaseID INT
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2
	
	SET @CaseID = 481
	SET @StartDate = '2016-07-01'
	SET @EndDate = '2016-07-31'
	-- */

	SELECT results.* FROM (

		SELECT 
			0 AS ReturnTypeID,	-- active providers
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName
		FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
		WHERE cp.CaseID = @CaseID
			AND cp.Active = 1


		UNION ALL


		SELECT
			1 AS ReturnTypeID, -- providers with hours
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName
		FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
			INNER JOIN dbo.CaseAuthHours AS cah ON cah.CaseProviderID = cp.ProviderID
		WHERE cah.CaseID = @CaseID
			AND cah.HoursDate >= @StartDate
			AND cah.HoursDate <= @EndDate
		GROUP BY 
			p.ID, 
			p.ProviderFirstName, 
			p.ProviderLastName


		UNION ALL


		SELECT
			2 AS ReturnTypeID, -- providers without hours
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName
		FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
			LEFT JOIN (
				SELECT cahSubset.*
				FROM dbo.CaseAuthHours AS cahSubset
				WHERE cahSubset.HoursDate >= @StartDate
					AND cahSubset.HoursDate < = @EndDate
					AND cahSubset.CaseID = @CaseID
			) AS cah ON cah.CaseProviderID = cp.ProviderID
		WHERE cp.Active = 1
			AND cp.CaseID = @CaseID
			AND cah.ID IS NULL
		GROUP BY 
			p.ID,
            p.ProviderFirstName,
            p.ProviderLastName


		UNION ALL


		SELECT
			3 AS ReturnTypeID, -- providers finalized 
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName
		FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
			LEFT JOIN (
				SELECT cahSubset.*
				FROM dbo.CaseAuthHours AS cahSubset
				WHERE cahSubset.HoursDate >= @StartDate
					AND cahSubset.HoursDate < = @EndDate
					AND cahSubset.CaseID = @CaseID
			) AS cah ON cah.CaseProviderID = cp.ProviderID
		WHERE cp.Active = 1
			AND cp.CaseID = @CaseID
			AND cah.HoursStatus >= 2
		GROUP BY 
			p.ID,
            p.ProviderFirstName,
            p.ProviderLastName


		UNION ALL


		SELECT
			4 AS ReturnTypeID, -- providers not finalized (only those with hours)
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName
		FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
			LEFT JOIN (
				SELECT cahSubset.*
				FROM dbo.CaseAuthHours AS cahSubset
				WHERE cahSubset.HoursDate >= @StartDate
					AND cahSubset.HoursDate < = @EndDate
					AND cahSubset.CaseID = @CaseID
			) AS cah ON cah.CaseProviderID = cp.ProviderID
		WHERE cp.Active = 1
			AND cp.CaseID = @CaseID
			AND (cah.HoursStatus < 2)
		GROUP BY 
			p.ID,
            p.ProviderFirstName,
            p.ProviderLastName
			
	) AS results

	ORDER BY results.ReturnTypeID, results.ProviderFirstName, results.ProviderLastName;

	RETURN
END

GO
/****** Object:  StoredProcedure [dbo].[GetMBHMonthlyBillingExport]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO








-- /*
-- ============================
-- Update critieria for billing export and provider end date
-- ============================

CREATE PROCEDURE [dbo].[GetMBHMonthlyBillingExport] (@FirstDayOfMonth DATETIME2, @BillingRef NVARCHAR(50)) AS 
-- */

	 /* TEST DATA
	DECLARE @FirstDayOfMonth DATETIME2
	DECLARE @BillingRef NVARCHAR(50)
	SET @FirstDayOfMonth = '2016-11-01'
	-- */

	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = @FirstDayOfMonth
	SET @EndDate = EOMONTH(@StartDate)

	--PRINT @StartDate
	--PRINT @EndDate

	SELECT
		cah.ID AS HoursID,
		p.PatientFirstName AS PatientFN,
		p.PatientLastName AS PatientLN,
		pv.ProviderFirstName AS ProviderFN,
		pv.ProviderLastName AS ProviderLN,
		c.ID AS CaseID,
		c.PatientID,
		cah.CaseProviderID AS ProviderID,
		NULL AS SupervisingBCBAID,
		cp.IsSupervisor AS IsBCBATimesheet,
		cah.HoursDate AS DateOfService,
		cah.HoursTimeIn AS StartTime,
		cah.HoursTimeOut AS EndTime,
		cah.HoursBillable AS TotalTime,
		s.ServiceCode,
		sl.LocationName AS PlaceOfService,
		sl.LocationMBHID AS PlaceOfServiceID,
		authedBcbaByCase.ProviderID AS InsurancedAuthorizedProviderID,
		pt.ProviderTypeCode AS ProviderType
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.CaseProviders AS cp ON c.ID = cp.CaseID AND cah.CaseProviderID = cp.ProviderID
	INNER JOIN dbo.Patients AS p ON c.PatientID = p.ID
	INNER JOIN dbo.Providers AS pv ON pv.ID = cp.ProviderID
	INNER JOIN dbo.Services AS s ON cah.HoursServiceID = s.ID
	LEFT JOIN dbo.ProviderTypes AS pt ON pt.ID = pv.ProviderType
	LEFT JOIN dbo.ServiceLocations AS sl ON sl.ID = COALESCE(cah.ServiceLocationID, c.DefaultServiceLocationID)
	LEFT JOIN (

		SELECT 
			sc.ID AS CaseID,
			scp.ProviderID AS ProviderID,
			scp.ActiveStartDate,
			scp.ActiveEndDate

		FROM dbo.Cases AS sc
		INNER JOIN dbo.CaseProviders AS scp ON sc.ID = scp.CaseID

		WHERE scp.IsInsuranceAuthorizedBCBA = 1


	) AS authedBcbaByCase ON c.ID = authedBcbaByCase.CaseID
	and (authedBcbaByCase.ActiveEndDate IS NULL OR authedBcbaByCase.ActiveEndDate >= cah.HoursDate)
			AND (authedBcbaByCase.ActiveStartDate IS NULL OR authedBcbaByCase.ActiveStartDate <= cah.HoursDate)

	WHERE cah.HoursDate >= @StartDate
		AND cah.HoursDate <= @EndDate
		AND cah.HoursStatus = 3 -- scrubbed hours only
		AND (cah.HoursBillingRef IS NULL OR cah.HoursBillingRef = @BillingRef)
		AND cah.HoursBillable <> 0
		--AND IsNull(cp.ActiveStartDate, '1900-01-01') <= cah.HoursDate
		--AND IsNull(cp.ActiveEndDate, '2199-01-01') >= cah.HoursDate
		--(cp.ActiveEndDate IS NULL OR cp.ActiveEndDate >= cah.HoursDate)
				

	ORDER BY cah.HoursDate, cah.HoursTimeIn

-- */





GO
/****** Object:  StoredProcedure [dbo].[GetPatientExcessDays]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE Procedure [dbo].[GetPatientExcessDays](
	@PatientId int,
	@StartDate datetime,
	@EndDate datetime,
	@Limit int,
	@AideProviderTypeId int = 17
)
AS

select c.PatientID, cah.HoursDate as [Date], sum(cah.HoursBillable) as BillableHours
from dbo.CaseAuthHours AS cah
INNER JOIN dbo.Providers AS p ON cah.CaseProviderID = p.ID
inner join Cases c
on cah.CaseID = c.ID
where c.PatientID = @PatientId
and cah.HoursDate >= @StartDate
and cah.HoursDate < @EndDate
AND p.ProviderType = @AideProviderTypeId
group by  c.PatientID, cah.HoursDate
having sum(cah.HoursBillable) > @Limit

GO
/****** Object:  StoredProcedure [dbo].[GetPatientSearchViewData]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[GetPatientSearchViewData](@ABATypeID INT) AS BEGIN
 /* TEST DATA
	DECLARE @ABATypeID INT
	SET @ABATypeID = (SELECT ID FROM dbo.ProviderTypes WHERE ProviderTypeCode = 'AIDE')
	-- */

	SELECT
		c.ID,
		p.ID AS PatientID,
		p.PatientFirstName AS FirstName,
		p.PatientLastName AS LastName,
		p.PatientCity,
		p.PatientState,
		p.PatientZip AS Zip,
		c.CaseStatus AS Status,
		c.CaseStatusReason AS StatusReason,
		auth.LatestStartDate AS StartDate,
		auth.LatestEndDate AS EndingAuthDate,
		c.CaseHasPrescription AS HasPrescription,
		c.CaseHasAssessment AS HasAssessment,
		c.CaseHasIntake AS HasIntake,
		CASE WHEN sup.CaseID IS NOT NULL THEN 1 ELSE 0 END AS HasSupervisor,
		sup.ProviderID AS PrimaryBCBAID,
		sup.ProviderFirstName AS BCBAFirstName,
		sup.ProviderLastName AS BCBALastName,
		aide.ProviderID AS PrimaryAideID,
		aide.ProviderFirstName AS AideFirstName,
		aide.ProviderLastName AS AideLastName,
		-- p.PatientInsuranceCompanyName,
		i.InsuranceName AS PatientInsuranceCompanyName,
		s.ID AS AssignedStaffID,
		s.StaffFirstName AS AssignedStaffFirstName,
		s.StaffLastName AS AssignedStaffLastName,
		c.CaseNeedsStaffing AS NeedsStaffing,
		c.CaseNeedsRestaffing AS NeedsRestaffing,
		c.CaseRestaffingReason AS RestaffingReason,
		c.CaseRestaffReasonID AS RestaffingReasonID
		
	FROM dbo.Patients AS p
	INNER JOIN dbo.Cases AS c ON p.ID = c.PatientID
	
	LEFT JOIN dbo.PatientCurrentInsurance AS pci ON pci.CaseID = c.ID

	LEFT JOIN dbo.Insurances AS i ON i.ID = pci.InsuranceID

	LEFT JOIN (
		SELECT base.CaseID, base.ProviderID, tmp.ProviderFirstName, tmp.ProviderLastName
		FROM (
			SELECT 
				cp.CaseID,
				MAX(subP.ID) AS ProviderID			
			FROM dbo.CaseProviders AS cp 
			INNER JOIN dbo.Providers AS subP ON cp.ProviderID = subP.ID
			WHERE cp.Active = 1 AND cp.IsSupervisor = 1 
			GROUP BY cp.CaseID
		) AS base
		INNER JOIN dbo.Providers AS tmp ON base.ProviderID = tmp.ID
	) AS sup ON sup.CaseID = c.ID

	LEFT JOIN (
		SELECT
			cac.CaseID,
			MAX(cac.AuthEndDate) AS LatestEndDate,
			MAX(cac.AuthStartDate) AS LatestStartDate
		FROM dbo.CaseAuthCodes AS cac
		WHERE cac.AuthEndDate IS NOT NULL
		GROUP BY cac.CaseID
	) AS auth ON c.ID = auth.CaseID

	LEFT JOIN (
		SELECT base.CaseID, base.ProviderID, tmp.ProviderFirstName, tmp.ProviderLastName
		FROM (
			SELECT
				cp.CaseID,
				MIN(subP.ID) AS ProviderID		
			FROM dbo.CaseProviders AS cp 
			INNER JOIN dbo.Providers AS subP ON cp.ProviderID = subP.ID
			WHERE cp.Active = 1 AND subP.ProviderType = @ABATypeID
			GROUP BY cp.CaseID
		) AS base
		INNER JOIN dbo.Providers AS tmp ON base.ProviderID = tmp.ID
	) AS aide ON aide.CaseID = c.ID

	LEFT JOIN dbo.Staff AS s ON s.ID = c.CaseAssignedStaffID

	WHERE c.CaseStatus <> -1

	ORDER BY LastName, FirstName;

	RETURN
	END


GO
/****** Object:  StoredProcedure [dbo].[GetPatientsExceedingDailyLimit]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE Procedure [dbo].[GetPatientsExceedingDailyLimit](
	@Limit int,
	@StartDate datetime,
	@EndDate datetime,
	@AideProviderTypeId int = 17
)
AS

	select distinct t.ID, t.PatientFirstName as FirstName, t.PatientLastName as LastName from Patients t
	inner join (
	SELECT 
		pt.ID
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Providers AS p ON cah.CaseProviderID = p.ID
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS pt ON pt.ID = c.PatientID
	WHERE cah.HoursDate >= @StartDate 
		AND cah.HoursDate < @EndDate
		AND p.ProviderType = @AideProviderTypeId
	GROUP BY
		pt.ID,
		cah.HoursDate
	Having Sum(cah.HoursBillable) > @Limit
	) q
	on t.ID = q.ID
	order by t.PatientLastName



GO
/****** Object:  StoredProcedure [dbo].[GetPeriodHoursMatrixByCase]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- GetPeriodHoursMatrixByCase (Total, Payable, Billable for All, BCBA, Aide)
-- ============================

CREATE PROCEDURE [dbo].[GetPeriodHoursMatrixByCase] (@CaseID INT, @StartDate DATETIME2, @EndDate DATETIME2) AS 

	/* TEST DATA
	DECLARE @CaseID INT
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2
	
	SET @CaseID = 484
	SET @StartDate = '2016-07-01'
	SET @EndDate = '2016-07-31 23:59:59'
	-- */

	SELECT final.* 
	FROM (
		
		SELECT 
			cah.CaseID,
			'AllHours' AS HoursType,
			SUM(cah.HoursTotal) AS TotalHours,
			SUM(cah.HoursBillable) AS BillableHours,
			SUM(cah.HoursPayable) AS PayableHours
		FROM dbo.CaseAuthHours AS cah
		WHERE cah.CaseID = @CaseID
			AND cah.HoursDate >= @StartDate
			AND cah.HoursDate <= @EndDate
			AND cah.HoursStatus >= 2
		GROUP BY cah.CaseID
	
		UNION ALL
		
		SELECT 
			cah.CaseID,
			'BCBAHours',
			SUM(cah.HoursTotal),
			SUM(cah.HoursBillable),
			SUM(cah.HoursPayable)
		FROM dbo.CaseAuthHours AS cah
		INNER JOIN (
			SELECT
				p.ID AS ProviderID
			FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
			INNER JOIN dbo.ProviderTypes AS pt ON p.ProviderType = pt.ID
			WHERE cp.CaseID = @CaseID
				AND pt.ProviderTypeCode = 'BCBA'
		) AS providerInfo ON cah.CaseProviderID = providerInfo.ProviderID
				
		WHERE cah.CaseID = @CaseID
			AND cah.HoursDate >= @StartDate
			AND cah.HoursDate <= @EndDate
			AND cah.HoursStatus >= 2
			
		GROUP BY cah.CaseID
		
		UNION ALL
		
		SELECT 
			cah.CaseID,
			'AideHours',
			SUM(cah.HoursTotal),
			SUM(cah.HoursBillable),
			SUM(cah.HoursPayable)
		FROM dbo.CaseAuthHours AS cah
		INNER JOIN (
			SELECT
				p.ID AS ProviderID
			FROM dbo.CaseProviders AS cp
			INNER JOIN dbo.Providers AS p ON p.ID = cp.ProviderID
			INNER JOIN dbo.ProviderTypes AS pt ON p.ProviderType = pt.ID
			WHERE cp.CaseID = @CaseID
				AND pt.ProviderTypeCode = 'AIDE'
		) AS providerInfo ON cah.CaseProviderID = providerInfo.ProviderID
				
		WHERE cah.CaseID = @CaseID
			AND cah.HoursDate >= @StartDate
			AND cah.HoursDate <= @EndDate
			AND cah.HoursStatus >= 2
			
		GROUP BY cah.CaseID
	
	) AS final
		
	RETURN

GO
/****** Object:  StoredProcedure [dbo].[GetProviderExcessDays]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE Procedure [dbo].[GetProviderExcessDays](
	@ProviderId int,
	@StartDate datetime,
	@EndDate datetime,
	@Limit int
)
AS

select h.CaseProviderID as ProviderId, h.HoursDate as [Date], sum(h.HoursBillable) as BillableHours
from CaseAuthHours h
where h.CaseProviderID = @ProviderId
and h.HoursDate >= @StartDate
and h.HoursDate < @EndDate
group by  h.CaseProviderID, h.HoursDate
having sum(h.HoursBillable) > @Limit

GO
/****** Object:  StoredProcedure [dbo].[GetProviderSearchViewData]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- add provider active status and active case count
CREATE PROCEDURE [dbo].[GetProviderSearchViewData] AS BEGIN


	SELECT
		p.ID,
		p.DateCreated,
		p.ProviderFirstname,
		p.ProviderLastname,
		pt.ProviderTypeCode,
		p.ProviderCity,
		p.ProviderState,
		p.ProviderZip,
		p.ProviderPrimaryEmail,
		p.ProviderPrimaryPhone,
		ProviderServiceAreas = STUFF(
			(
				SELECT ',' + pz.ZipCode
				FROM dbo.ProviderServiceZipCodes AS pz
				WHERE p.ID = pz.ProviderID
				FOR XML PATH(''), TYPE
			).value('.', 'NVARCHAR(MAX)'), 1, 1, ''
		),
		ProviderLanguages = STUFF(
			(
				SELECT ',' + cl.Description
				FROM dbo.CommonLanguages AS cl
				INNER JOIN dbo.ProviderLanguages AS pl ON cl.ID = pl.LanguageID
				WHERE pl.ProviderID = p.ID
				FOR XML PATH(''), TYPE
			).value('.', 'NVARCHAR(MAX)'), 1, 1, ''
		),
		p.ProviderActive,
		COALESCE(caseCount.CaseCount, 0) AS ProviderActiveCaseCount
		
	FROM dbo.Providers AS p
	LEFT JOIN dbo.ProviderTypes AS pt ON pt.ID = p.ProviderType
	LEFT JOIN (
		SELECT 
			cp.ProviderID, 
			COUNT(*) AS CaseCount
		FROM dbo.CaseProviders AS cp
		WHERE cp.Active = 1
		GROUP BY cp.ProviderID
	) AS caseCount ON p.ID = caseCount.ProviderID
	
	WHERE p.ProviderActive = 1
	
	ORDER BY p.ProviderLastName;
	
END



GO
/****** Object:  StoredProcedure [dbo].[GetProvidersExceedingDailyLimit]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- ============================
-- Create procs for better MHD handling
-- ============================
	 
CREATE Procedure [dbo].[GetProvidersExceedingDailyLimit](
	@Limit int,
	@StartDate datetime,
	@EndDate datetime,
	@AideProviderTypeId int = 17
)
AS

	select distinct t.ID, t.ProviderFirstName as FirstName, t.ProviderLastName as LastName, t.ProviderFirstName + ' ' + t.ProviderLastName as [Name] from Providers t
	inner join (
	SELECT 
		p.ID
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Providers AS p ON cah.CaseProviderID = p.ID
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS pt ON pt.ID = c.PatientID
	WHERE cah.HoursDate >= @StartDate 
		AND cah.HoursDate < @EndDate
		AND p.ProviderType = @AideProviderTypeId
	GROUP BY
		p.ID,
		cah.HoursDate
	Having Sum(cah.HoursBillable) > @Limit
	) q
	on t.ID = q.ID
	order by t.ProviderLastName



GO
/****** Object:  StoredProcedure [dbo].[GetReferralSearchViewData]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[GetReferralSearchViewData] AS BEGIN

	SELECT
		r.ID,
		r.DateCreated,
		rs.StatusName,
		r.ReferralFirstName,
		r.ReferralLastName,
		r.ReferralInsuranceCompanyName,
		r.ReferralDismissalReason,
		r.ReferralAddress1,
		r.ReferralCity,
		r.ReferralState,
		r.ReferralZip,
		cl.Description AS ReferralLanguage,
		r.ReferralPhone		
	
	FROM dbo.Referrals AS r
	LEFT JOIN dbo.ReferralStatuses AS rs ON r.ReferralStatus = rs.ID
	LEFT JOIN dbo.CommonLanguages AS cl ON cl.ID = r.ReferralPrimarySpokenLanguageID
	
	WHERE r.ReferralActive = 1

	ORDER BY r.ReferralLastName

END


GO
/****** Object:  StoredProcedure [dbo].[GetUnfinalizedProviders]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- ============================
-- Add report source for unfinalized providers
-- ============================
CREATE PROCEDURE [dbo].[GetUnfinalizedProviders](@StartDate DATETIME2, @EndDate DATETIME2) AS BEGIN

	/* TEST DATA
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = '2016-06-01' -- uses >= comparison
	SET @EndDate = '2016-07-01'	-- uses < comparison
	-- */

	SELECT a.*,
		CASE WHEN b.ProviderID IS NULL THEN 'N' ELSE 'Y' END AS HasFinalization

	FROM (
		SELECT
			p.ID AS ProviderID,
			p.ProviderFirstName,
			p.ProviderLastName,
			p.ProviderPrimaryEmail,
			COUNT(h.ID) AS HoursCount
		FROM dbo.Providers AS p
		INNER JOIN dbo.CaseAuthHours AS h ON p.ID = h.CaseProviderID

		WHERE h.HoursStatus < 2 -- not finalized
			AND h.HoursDate >= @StartDate
			AND h.HoursDate < @EndDate

		GROUP BY 
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName,
			p.ProviderPrimaryEmail
	) AS a 

		LEFT JOIN (

		SELECT
			p.ID AS ProviderID,
			p.ProviderFirstName,
			p.ProviderLastName,
			p.ProviderPrimaryEmail,
			COUNT(h.ID) AS HoursCount
		FROM dbo.Providers AS p
		INNER JOIN dbo.CaseAuthHours AS h ON p.ID = h.CaseProviderID

		WHERE h.HoursStatus = 2	-- finalized hours
			AND h.HoursDate >= @StartDate
			AND h.HoursDate < @EndDate

		GROUP BY 
			p.ID,
			p.ProviderFirstName,
			p.ProviderLastName,
			p.ProviderPrimaryEmail

	) AS b ON a.ProviderID = b.ProviderID

	RETURN
END

GO
/****** Object:  StoredProcedure [dbo].[UpsertGeneralHours]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[UpsertGeneralHours](@CaseAuthID INT, @Year INT, @Month INT, @Hours DECIMAL(6,2)) AS

	BEGIN TRANSACTION

		IF EXISTS(
			SELECT * 
			FROM dbo.CaseAuthCodeGeneralHours 
			WHERE CaseAuthID = @CaseAuthID
				AND HoursYear = @Year
				AND HoursMonth = @Month
			)
		
			BEGIN

				UPDATE dbo.CaseAuthCodeGeneralHours 
				SET HoursApplied = @Hours
				WHERE CaseAuthID = @CaseAuthID
					AND HoursYear = @Year
					AND HoursMonth = @Month

			END

		ELSE

			BEGIN

				INSERT INTO dbo.CaseAuthCodeGeneralHours
				        (CaseAuthID,
				         HoursYear,
				         HoursMonth,
				         HoursApplied
				        )
				VALUES  (@CaseAuthID, -- CaseAuthID - int
				         @Year, -- HoursYear - int
				         @Month, -- HoursMonth - int
				         @Hours  -- HoursApplied - decimal(6,2)
				        )

			END

	COMMIT TRANSACTION

GO
/****** Object:  StoredProcedure [dbo].[UtilityParentPortalActivity]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


 CREATE PROCEDURE [dbo].[UtilityParentPortalActivity] AS 


	-- /* 

	SELECT 
		(SELECT COUNT(*) FROM dbo.PatientPortalLogins) AS TotalLogins,
		(SELECT COUNT(*) FROM (SELECT LoginID FROM dbo.PatientPortalLoginSignatures GROUP BY LoginID) AS a) AS LoginsWithSignatures,
		(SELECT COUNT(*) FROM dbo.CaseAuthHours WHERE HoursDate >= '2017-01-01') AS TotalHoursRecords,
		(SELECT COUNT(*) FROM dbo.CaseAuthHours WHERE HoursDate >= '2017-01-01' AND ParentApprovalID IS NOT NULL) AS TotalHoursRecordsApproved

	
	-- */

	SELECT 
		a.HoursMonth, 
		c.TotalApprovals AS TotalApprovalsPerMonth,
		a.TotalHoursPerMonth, 
		b.HoursApprovedPerMonth,
		CASE WHEN 
			a.TotalHoursPerMonth = 0 
			THEN NULL 
			ELSE b.HoursApprovedPerMonth / CAST(a.TotalHoursPerMonth AS decimal(10,2)) * 100 
		END AS UtilizationPercentage
	FROM (
		SELECT 
			DATEADD(MONTH, DATEDIFF(MONTH, 0, HoursDate), 0) AS HoursMonth,
			COUNT(*) AS TotalHoursPerMonth
		FROM dbo.CaseAuthHours 
		WHERE HoursDate >= '2017-01-01' 
			AND HoursDate <= GETDATE()
		GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, HoursDate), 0)
		-- ORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, HoursDate), 0)
	) AS a
	
	LEFT JOIN (
		SELECT 
			DATEADD(MONTH, DATEDIFF(MONTH, 0, HoursDate), 0) AS HoursMonth,
			COUNT(*) AS HoursApprovedPerMonth
		FROM dbo.CaseAuthHours 
		WHERE 
			HoursDate >= '2017-01-01' 
			AND HoursDate <= GETDATE()
			AND ParentApprovalID IS NOT NULL	
		GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, HoursDate), 0)
		-- ORDER BY DATEADD(MONTH, DATEDIFF(MONTH, 0, HoursDate), 0)
	) AS b ON a.HoursMonth = b.HoursMonth

	LEFT JOIN (
		SELECT 
			DATEADD(MONTH, DATEDIFF(MONTH, 0, ApprovalDate), 0) AS HoursMonth,
			COUNT(*) AS TotalApprovals
		FROM dbo.CaseMonthlyPeriodParentApprovals AS a
		GROUP BY DATEADD(MONTH, DATEDIFF(MONTH, 0, ApprovalDate), 0)
	) AS c ON c.HoursMonth = a.HoursMonth

	ORDER BY a.HoursMonth

	

	



GO
/****** Object:  StoredProcedure [meta].[UpdateVersion]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [meta].[UpdateVersion](@Version NVARCHAR(50)) AS
BEGIN
	UPDATE meta.DatabaseSettings SET SettingValue = @Version WHERE SettingName = 'DBVersion';
END

GO
/****** Object:  StoredProcedure [webreports].[BillingCaseInfo]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [webreports].[BillingCaseInfo] (@CaseID INT) AS

	 /* TEST DATA
	DECLARE @CaseID INT
	
	SET @CaseID = 383
	-- */
		
	SELECT
		c.ID AS CaseID,
		p.PatientFirstName,
		p.PatientLastName,
		p.PatientPhone
	FROM dbo.Cases AS c
	INNER JOIN dbo.Patients AS p ON c.PatientID = p.ID
	WHERE c.ID = @CaseID;


GO
/****** Object:  StoredProcedure [webreports].[BillingHoursInfo]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [webreports].[BillingHoursInfo] (@CaseID INT, @FirstDayOfMonth DATETIME2, @BillingRef NVARCHAR(30)) AS

	 /*	TEST DATA
	DECLARE @CaseID INT
	DECLARE @FirstDayOfMonth DATETIME2

	SET @CaseID = 383
	SET @FirstDayOfMonth = '2016-05-01'
	-- */

	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = @FirstDayOfMonth
	SET @EndDate = EOMONTH(@StartDate)

	SELECT
		cah.ID AS HoursID,
		p.ID AS ProviderID,
		cah.HoursDate,
		cah.HoursTimeIn,
		cah.HoursTimeOut,
		cah.HoursBillable,
		svc.ServiceCode,
		svc.ServiceName,
		cah.HoursNotes
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Providers AS p ON p.ID = cah.CaseProviderID
	LEFT JOIN dbo.Services AS svc ON svc.ID = cah.HoursServiceID

	WHERE cah.CaseID = @CaseID
		AND cah.HoursStatus = 3	-- srubbed only
		AND cah.HoursDate >= @StartDate
		AND cah.HoursDate <= @EndDate
		AND (cah.HoursBillingRef IS NULL
			OR cah.HoursBillingRef = @BillingRef)



GO
/****** Object:  StoredProcedure [webreports].[BillingProviderInfo]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [webreports].[BillingProviderInfo] (@CaseID INT, @FirstDayOfMonth DATETIME2, @BillingRef NVARCHAR(30)) AS

	 /*	TEST DATA
	DECLARE @CaseID INT
	DECLARE @FirstDayOfMonth DATETIME2

	SET @CaseID = 383
	SET @FirstDayOfMonth = '2016-05-01'
	-- */

	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = @FirstDayOfMonth
	SET @EndDate = EOMONTH(@StartDate)

	SELECT
		cp.CaseID,
		p.ID AS ProviderID,
		p.ProviderFirstName,
		p.ProviderLastName,
		p.ProviderPrimaryPhone,
		pt.ProviderTypeCode,
		cp.IsSupervisor,
		cp.IsAssessor
	FROM dbo.Providers AS p
	LEFT JOIN dbo.ProviderTypes AS pt ON p.ProviderType = pt.ID
	INNER JOIN dbo.CaseProviders AS cp ON p.ID = cp.ProviderID
	INNER JOIN dbo.CaseAuthHours AS cah ON p.ID = cah.CaseProviderID

	WHERE cp.CaseID = @CaseID
		AND cah.CaseID = @CaseID
		AND cah.HoursDate >= @StartDate
		AND cah.HoursDate <= @EndDate
		AND cah.HoursStatus = 3 -- scrubbed hours only
		AND (cah.HoursBillingRef IS NULL
			OR cah.HoursBillingRef = @BillingRef)

	GROUP BY 
		cp.CaseID,
		p.ID,
        p.ProviderFirstName,
        p.ProviderLastName,
        p.ProviderPrimaryPhone,
        pt.ProviderTypeCode,
        cp.IsSupervisor,
        cp.IsAssessor



GO
/****** Object:  StoredProcedure [webreports].[ParentApprovalHoursReport]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

  CREATE PROCEDURE [webreports].[ParentApprovalHoursReport] (@ParentApprovalID INT) AS 

	 --	TEST DATA
	--DECLARE @ParentApprovalID INT
	
	--SET @ParentApprovalID = 21
	-- 


		
	SELECT 
		per.PeriodFirstDayOfMonth As StartDate,
		DATEADD(DAY, -1, DATEADD(MONTH, 1, per.PeriodFirstDayOfMonth)) As EndDate,

		approvals.DateCreated As SignoffDate,

		

		pnt.PatientLastName,
		pnt.PatientFirstName,
		parents.LoginFirstName AS ParentFirstName,
		parents.LoginLastName AS ParentLastName,
		cah.HoursDate,
		CAST(cah.HoursTimeIn AS DATETIME) AS HoursTimeIn,
		CAST(cah.HoursTimeOut AS DATETIME) AS HoursTimeOut,
		cah.HoursTotal,
		p.ProviderLastName,
		p.ProviderFirstName,
		pt.ProviderTypeCode AS ProviderType,
		s.ServiceName AS ServiceName,
		cah.HoursNotes
		
		
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.CaseMonthlyPeriodParentApprovals As approvals ON approvals.ID = cah.ParentApprovalID
	INNER JOIN dbo.PatientPortalLogins As parents ON parents.ID = approvals.PatientPortalLoginID
	INNER JOIN dbo.CaseMonthlyPeriods AS per ON per.ID = approvals.MonthlyPeriodID
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS pnt ON pnt.ID = c.PatientID
	INNER JOIN dbo.Providers AS p ON p.ID = cah.CaseProviderID
	LEFT JOIN dbo.ProviderTypes AS pt ON pt.ID = p.ProviderType
	LEFT JOIN dbo.[Services] AS s ON s.ID = cah.HoursServiceID

	
	WHERE cah.ParentApprovalID = @ParentApprovalID
		
	ORDER BY cah.HoursDate, cah.HoursTimeIn
	
	
	
	RETURN
	




GO
/****** Object:  StoredProcedure [webreports].[PatientHoursReportDetail]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================
-- Add latest signoff dates for all providers
-- =============================

CREATE PROCEDURE [webreports].[PatientHoursReportDetail] (@CaseID INT, @StartDate DATETIME2, @EndDate DATETIME2) AS 

	 
	/* --	TEST DATA
	DECLARE @CaseID INT
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2
	
	SET @CaseID = 481
	SET @StartDate = '2017-01-01'
	SET @EndDate = '2017-01-31'
	-- */


		
	SELECT 
		@StartDate AS StartDate,
		@EndDate AS EndDate,

		signoff.SignoffDate,
		COALESCE(authd.ID, supervisor.ID, bcba.ID) AS reportedBCBAID,
		COALESCE(authd.FirstName, supervisor.FirstName, bcba.FirstName) AS reportedBCBAFirstName,
		COALESCE(authd.Lastname, supervisor.LastName, bcba.LastName) AS reportedBCBALastName,

		pnt.PatientLastName,
		pnt.PatientFirstName,
		cah.HoursDate,
		CAST(cah.HoursTimeIn AS DATETIME) AS HoursTimeIn,
		CAST(cah.HoursTimeOut AS DATETIME) AS HoursTimeOut,
		cah.HoursTotal,

		p.ID AS ProviderID,
		p.ProviderLastName,
		p.ProviderFirstName,
		pt.ProviderTypeCode,
		allSignoffs.LatestSignoffDate,

		s.ServiceCode,
		cah.ID,
		CASE WHEN pt.ID = 15 THEN extendedNotes.NotesField
		ELSE cah.HoursNotes END AS HoursNotes
		
		
	FROM dbo.CaseAuthHours AS cah
	INNER JOIN dbo.Cases AS c ON c.ID = cah.CaseID
	INNER JOIN dbo.Patients AS pnt ON pnt.ID = c.PatientID
	INNER JOIN dbo.Providers AS p ON p.ID = cah.CaseProviderID
	LEFT JOIN dbo.ProviderTypes AS pt ON pt.ID = p.ProviderType
	LEFT JOIN dbo.Services AS s ON s.ID = cah.HoursServiceID
	LEFT JOIN (

		SELECT
			bcbaCP.CaseID,
			bcbaP.ID,
			bcbaP.ProviderFirstName AS FirstName,
			bcbaP.ProviderLastName AS LastName
		FROM dbo.CaseProviders AS bcbaCP
		INNER JOIN dbo.Providers AS bcbaP ON bcbaP.ID = bcbaCP.ProviderID
		INNER JOIN dbo.CaseAuthHours AS bcbaCAH ON bcbaCAH.CaseProviderID = bcbaCP.ProviderID

		WHERE bcbaCP.CaseID = @CaseID
			AND bcbaCP.IsSupervisor = -1
			--AND bcbaCAH.HoursDate >= @Startdate
			--AND bcbaCAH.HoursDate <= @EndDate
			AND ((bcbaCP.ActiveEndDate IS NULL AND bcbaCP.ActiveStartDate IS NOT NULL) OR bcbaCP.ActiveEndDate >= @EndDate)
			AND ((bcbaCP.ActiveStartDate IS NULL AND bcbaCP.ActiveEndDate IS NOT NULL) OR bcbaCP.ActiveStartDate <= @StartDate)

	) AS supervisor ON supervisor.CaseID = cah.CaseID

	LEFT JOIN (

		SELECT TOP 1
			bcbaCP.CaseID,
			bcbaP.ID,
			bcbaP.ProviderFirstName AS FirstName,
			bcbaP.ProviderLastName AS LastName
		FROM dbo.CaseProviders AS bcbaCP
		INNER JOIN dbo.Providers AS bcbaP ON bcbaP.ID = bcbaCP.ProviderID
		-- INNER JOIN dbo.CaseAuthHours AS bcbaCAH ON bcbaCAH.CaseProviderID = bcbaP.ID
		WHERE bcbaCP.CaseID = @CaseID
			AND bcbaP.ProviderType = 15
			AND bcbaCP.IsInsuranceAuthorizedBCBA = -1
			--AND bcbaCAH.HoursDate >= @StartDate
			--AND bcbaCAH.HoursDate >= @EndDate
			AND ((bcbaCP.ActiveEndDate IS NULL AND bcbaCP.ActiveStartDate IS NOT NULL) OR bcbaCP.ActiveEndDate >= @EndDate)
			AND ((bcbaCP.ActiveStartDate IS NULL AND bcbaCP.ActiveEndDate IS NOT NULL) OR bcbaCP.ActiveStartDate <= @StartDate)
			
	) AS authd ON authd.CaseID = cah.CaseID

	LEFT JOIN (

		SELECT TOP 1
			bcbaCP.CaseID,
			bcbaP.ID,
			bcbaP.ProviderFirstName AS FirstName,
			bcbaP.ProviderLastName AS LastName
		FROM dbo.CaseProviders AS bcbaCP
		INNER JOIN dbo.Providers AS bcbaP ON bcbaP.ID = bcbaCP.ProviderID
		INNER JOIN dbo.CaseAuthHours AS bcbaCAH ON bcbaCAH.CaseProviderID = bcbaP.ID
		WHERE bcbaCP.CaseID = @CaseID
			AND bcbaP.ProviderType = 15
			--AND bcbaCAH.HoursDate >= @StartDate
			--AND bcbaCAH.HoursDate >= @EndDate
			AND ((bcbaCP.ActiveEndDate IS NULL AND bcbaCP.ActiveStartDate IS NOT NULL) OR bcbaCP.ActiveEndDate >= @EndDate)
			AND ((bcbaCP.ActiveStartDate IS NULL AND bcbaCP.ActiveEndDate IS NOT NULL) OR bcbaCP.ActiveStartDate <= @StartDate)

	) AS bcba ON bcba.CaseID = cah.CaseID


	LEFT JOIN (

		SELECT TOP 1
			signoffCMP.CaseID,
			signoffCMPPF.DateCreated AS SignoffDate

		FROM dbo.CaseMonthlyPeriods AS signoffCMP
		INNER JOIN dbo.CaseMonthlyPeriodProviderFinalizations AS signoffCMPPF ON signoffCMP.ID = signoffCMPPF.CaseMonthlyPeriodID

		WHERE signoffCMP.CaseID = @CaseID
			AND signoffCMP.PeriodFirstDayOfMonth >= @StartDate
			AND signoffCMP.PeriodFirstDayOfMonth <= @EndDate

	) AS signoff ON signoff.CaseID = cah.CaseID

	LEFT JOIN (

		SELECT MAX(signoffCMPPF.DateCreated) AS LatestSignoffDate,
			signoffCMPPF.ProviderID

		FROM dbo.CaseMonthlyPeriods AS signoffCMP
		INNER JOIN dbo.CaseMonthlyPeriodProviderFinalizations AS signoffCMPPF ON signoffCMP.ID = signoffCMPPF.CaseMonthlyPeriodID

		WHERE signoffCMP.CaseID = @CaseID
			AND signoffCMP.PeriodFirstDayOfMonth >= @StartDate
			AND signoffCMP.PeriodFirstDayOfMonth <= @EndDate

		GROUP BY signoffCMPPF.ProviderID

	) AS allSignoffs ON p.ID = allSignoffs.ProviderID

	--Left Join CaseAuthHoursNotes as extendedNotes on extendedNotes.HoursID = cah.ID

	LEFT JOIN(
		
		SELECT
			HoursID,
			STUFF(
				(SELECT  Char(10) + TemplateText + ':' + Char(10) + NotesAnswer + Char(10)
				From CaseAuthHoursNotes
				Inner Join HoursNoteTemplates
					on HoursNoteTemplates.ID = CaseAuthHoursNotes.NotesTemplateID
				Where HoursID = c.HoursID And NotesAnswer Is Not NULL
				FOR XML PATH (''))
				, 1, 1, '') AS NotesField
		FROM CaseAuthHoursNotes As c
		Group By HoursID


	)As extendedNotes On extendedNotes.HoursID = cah.ID
	
	WHERE cah.CaseID = @CaseID
		AND cah.HoursDate >= @StartDate
		AND cah.HoursDate <= @EndDate
		
	ORDER BY cah.HoursDate, cah.HoursTimeIn
	
	RETURN

GO
/****** Object:  StoredProcedure [webreports].[PatientHoursReportDetailSignatures]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- get just a list of signoffs
 CREATE PROCEDURE [webreports].[PatientHoursReportDetailSignatures] (@CaseID INT, @StartDate DATETIME2, @EndDate DATETIME2) AS 
 	 
	/* --	TEST DATA
	DECLARE @CaseID INT
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2
	
	SET @CaseID = 481
	SET @StartDate = '2017-01-01'
	SET @EndDate = '2017-01-31'
	-- */

	DECLARE @tablevar TABLE(
		StartDate DATETIME2, EndDate DATETIME2, SignoffDate DATETIME2, reportedBCBAID INT, reportedBCBAFirstName NVARCHAR(100), reportedBCBALastName NVARCHAR(100),
		PatientLastName NVARCHAR(100), PatientFirstName NVARCHAR(100), HoursDate DATETIME2, HoursTimeIn DATETIME2, HoursTimeOut DATETIME2, HoursTotal DECIMAL(10,2),
		ProviderID INT, ProviderLastName NVARCHAR(100), ProviderFirstName NVARCHAR(100), ProviderTypeCode NVARCHAR(100), LatestSignoffDate DATETIME2, ServiceCode NVARCHAR(100), ID INT, HoursNotes NVARCHAR(1000));
	INSERT INTO @tablevar (
		StartDate, EndDate, SignoffDate, reportedBCBAID, reportedBCBAFirstName, reportedBCBALastName,
		PatientLastName, PatientFirstName, HoursDate, HoursTimeIn, HoursTimeOut, HoursTotal,
		ProviderID, ProviderLastName, ProviderFirstName, ProviderTypeCode, LatestSignoffDate, ServiceCode, ID, HoursNotes
		) EXEC webreports.PatientHoursReportDetail @CaseID, @StartDate, @EndDate;

	SELECT 
		reportedBCBAID AS ProviderID,
		reportedBCBAFirstName AS ProviderFirstName,
		reportedBCBALastName AS ProviderLastName,
		SignoffDate		
	FROM @tablevar
	GROUP BY 
		reportedBCBAID,
		reportedBCBAFirstName,
		reportedBCBALastName,
		SignoffDate		

	UNION

	SELECT
		ProviderID,
		ProviderFirstName,
		ProviderLastName,
		LatestSignoffDate
	FROM @tablevar
	GROUP BY
		ProviderID,
		ProviderFirstName,
		ProviderLastName,
		LatestSignoffDate

	RETURN


GO
/****** Object:  StoredProcedure [webreports].[PayablesByPeriod]    Script Date: 12/7/2017 12:49:48 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [webreports].[PayablesByPeriod](@FirstDayOfMonth DATETIME2) AS

	 /*	TEST DATA
	DECLARE @FirstDayOfMonth DATETIME2
	SET @FirstDayOfMonth = '2016-05-01'
	-- */
	
	DECLARE @StartDate DATETIME2
	DECLARE @EndDate DATETIME2

	SET @StartDate = @FirstDayOfMonth
	SET @EndDate = EOMONTH(@StartDate)
	
	SELECT
		p.ID,
		p.ProviderFirstName,
		p.ProviderLastName,
		SUM(h.HoursPayable) AS TotalPayable
	FROM dbo.Providers AS p
	INNER JOIN dbo.CaseAuthHours AS h ON h.CaseProviderID = p.ID
	WHERE h.HoursStatus = 3 -- finalized hours only
		AND h.HoursDate >= @StartDate
		AND h.HoursDate <= @EndDate
		AND h.HoursPayableRef IS NULL
	GROUP BY 
		p.ID,
		p.ProviderFirstName,
		p.ProviderLastName
	ORDER BY p.ProviderLastName
	
	
	RETURN


GO
USE [master]
GO
ALTER DATABASE [aabc_ci_test] SET  READ_WRITE 
GO
