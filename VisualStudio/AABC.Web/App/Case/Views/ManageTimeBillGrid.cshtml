@model List<AABC.Web.Models.Cases.TimeBillGridListItemVM>



@Html.DevExpress().GridView(
    s => {

        s.Name = "gvCaseTimeBillGrid";
        s.KeyFieldName = "HoursID";

        s.CallbackRouteValues = new { Controller = "Case", Action = "TimeBillGridCallback" };

        s.ClientSideEvents.BeginCallback = "function(s, e) { TimeBill.Scrub.Grid.BeginCallback(s, e); }";
        s.ClientSideEvents.EndCallback = "function(s, e) { TimeBill.Scrub.Grid.EndCallback(s, e); }";

        s.Width = Unit.Percentage(100);
        s.Height = 700;
        s.SettingsPager.PageSize = 500;

        s.SettingsEditing.Mode = GridViewEditingMode.Batch;
        s.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Row;
        s.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Case", Action = "TimeBillGridBatchCallback" };

        s.ClientSideEvents.BeginCallback = "function(s, e) { TimeBill.Scrub.Grid.BeginCallback(s, e); }";
        s.ClientSideEvents.EndCallback = "function(s, e) { TimeBill.Scrub.Grid.EndCallback(s, e); }";
        s.ClientSideEvents.CallbackError = "function(s, e) { alert(e.message); }";

        s.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;

        var col = s.Columns.Add("colActions");
        col.Caption = "Actions";
        col.Width = 125;
        col.FieldName = "Unbound";
        col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        col.EditFormSettings.Visible = DefaultBoolean.False;
        col.SetDataItemTemplateContent((x) => {

            var hoursID = x.KeyValue;

            Html.DevExpress().HyperLink(hlSettings => {
                hlSettings.Name = "hlEdit_" + hoursID;
                hlSettings.Properties.Text = "Edit";
                hlSettings.Properties.ClientSideEvents.Click = "function(s, e) { window.aabc.showHoursEntry(" + hoursID + "); }";
            }).Render();

            ViewContext.Writer.Write(" | ");

            Html.DevExpress().HyperLink(hlSettings => {
                hlSettings.Name = "hlDelete_" + hoursID;
                hlSettings.Properties.Text = "Delete";
                hlSettings.Properties.ClientSideEvents.Click = "function(s, e) { window.aabc.deleteHoursEntry(" + hoursID + "); }";
            }).Render();

            ViewContext.Writer.Write(" | ");

            Html.DevExpress().HyperLink(hlSettings =>
            {
                hlSettings.Name = "hlRouting_" + hoursID;
                hlSettings.Properties.Text = "Routing";
                hlSettings.Properties.ClientSideEvents.Click = "function(s, e) { window.aabc.showAuthResolutionDetails(" + hoursID + "); }";
            }).Render();
        });

        col = s.Columns.Add("colStatus");
        col.Caption = "Status";
        col.FieldName = "StatusCode";
        col.Width = 30;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditCellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditFormSettings.Visible = DefaultBoolean.False;

        col = s.Columns.Add("colHasData");
        col.Caption = "Has Data";
        col.FieldName = "HasCatalystData";
        col.Width = 30;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditCellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;

        col = s.Columns.Add("colBilled");
        col.Caption = "Billed";
        col.FieldName = "Billed";
        col.Width = 30;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditCellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditFormSettings.Visible = DefaultBoolean.False;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;

        col = s.Columns.Add("colPaid");
        col.Caption = "Paid";
        col.FieldName = "Paid";
        col.Width = 30;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditCellStyle.HorizontalAlign = HorizontalAlign.Center;
        col.EditFormSettings.Visible = DefaultBoolean.False;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;

        col = s.Columns.Add("Reported");
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.EditFormSettings.Visible = DefaultBoolean.False;
        col.Width = 55;

        s.FormatConditions.AddHighlight(condition => {
            condition.FieldName = "Reported";
            condition.Rule = GridConditionRule.Expression;
            condition.Expression = "[Reported]";
            condition.Format = GridConditionHighlightFormat.LightRedFill;
        });

        col = s.Columns.Add("colCaseAuth");
        col.FieldName = "AuthCode";
        col.Caption = "Auth";
        col.EditFormSettings.Visible = DefaultBoolean.False;

        col = s.Columns.Add("colDate");
        col.Caption = "Date";
        col.FieldName = "Date";
        col.Width = 75;
        col.PropertiesEdit.DisplayFormatString = "d";
        col.ColumnType = MVCxGridViewColumnType.DateEdit;
        DateEditProperties deProps = col.PropertiesEdit as DateEditProperties;
        deProps.DisplayFormatString = "d";
        deProps.Width = 75;

        col = s.Columns.Add("colTimeIn");
        col.FieldName = "TimeIn";
        col.Caption = "Time In";
        col.PropertiesEdit.DisplayFormatString = "t";
        col.ColumnType = MVCxGridViewColumnType.TimeEdit;
        TimeEditProperties teProps = col.PropertiesEdit as TimeEditProperties;
        teProps.DisplayFormatString = "t";
        teProps.Width = 75;

        col = s.Columns.Add("colTimeOut");
        col.FieldName = "TimeOut";
        col.Caption = "Time Out";
        col.PropertiesEdit.DisplayFormatString = "t";
        col.ColumnType = MVCxGridViewColumnType.TimeEdit;
        teProps = col.PropertiesEdit as TimeEditProperties;
        teProps.DisplayFormatString = "t";
        teProps.Width = 75;

        col = s.Columns.Add("colService");
        col.FieldName = "Service.ID";
        col.Caption = "Service";
        col.ColumnType = MVCxGridViewColumnType.ComboBox;
        var cbProps = col.PropertiesEdit as ComboBoxProperties;
        cbProps.TextField = "Name";
        cbProps.ValueField = "ID";
        cbProps.ValueType = typeof(int);
        cbProps.DataSource = ViewBag.ServiceList;

        col = s.Columns.Add("colHours");
        col.FieldName = "Hours";
        col.Caption = "Hours";
        col.Width = 50;
        col.EditFormSettings.Visible = DefaultBoolean.False;

        col = s.Columns.Add("colPayable");
        col.FieldName = "Payable";
        col.Caption = "Payable";
        col.Width = 50;

        col = s.Columns.Add("colBillable");
        col.FieldName = "Billable";
        col.Caption = "Billable";
        col.Width = 50;

        col = s.Columns.Add("colProviderType");
        col.Caption = "Type";
        col.FieldName = "ProviderTypeName";
        col.EditFormSettings.Visible = DefaultBoolean.False;

        col = s.Columns.Add("colProvider");
        col.Caption = "Provider";
        col.FieldName = "ProviderName";
        col.EditFormSettings.Visible = DefaultBoolean.False;

        col = s.Columns.Add("colServiceLocation");
        col.FieldName = "ServiceLocationID";
        col.Caption = "Loc.";
        col.Width = 75;
        col.ColumnType = MVCxGridViewColumnType.ComboBox;
        cbProps = col.PropertiesEdit as ComboBoxProperties;
        cbProps.Columns.Add("Name", "Name");
        cbProps.ValueField = "ID";
        cbProps.ValueType = typeof(int);
        cbProps.DataSource = ViewBag.ServiceLocationList;



        s.Settings.ShowTitlePanel = true;
        s.SetTitlePanelTemplateContent(
            c => {

                ViewContext.Writer.Write("<div style='float: left;'>");

                ViewContext.Writer.Write("<table><tr><td>");

                Html.DevExpress().ComboBox(
                        cb => {
                            cb.Name = "SelectedDate";
                            cb.Properties.TextField = "Display";
                            cb.Properties.ValueField = "Date";
                            cb.Properties.ValueType = typeof(DateTime);
                            cb.PreRender = (sender, e) => {
                                AABC.Web.Helpers.DevEx.ComboPreRenderByField(sender, ViewBag.SelectedDate, "Date");
                            };
                            cb.Properties.Caption = "Current Period";
                            cb.Properties.ClientSideEvents.ValueChanged = "function(s, e) { TimeBill.Scrub.TargetDate.AfterUpdate(); }";
                        }
                    ).BindList(ViewBag.AvailableDates).Render();



                ViewContext.Writer.Write("</td><td style='padding-left: 5px;'>");

                Html.DevExpress().Button(bs => {
                    bs.Name = "btnDownloadHoursReports";
                    bs.Text = "Download Reports";
                    bs.ClientSideEvents.Click = "function(s, e) { TimeBill.Scrub.DownloadHoursReports(); }";
                }).Render();


                ViewContext.Writer.Write("</td><td style='padding-left: 5px;'>");

                Html.DevExpress().Button(hlSettings => {
                    hlSettings.Name = "hlFinalizeAll";
                    hlSettings.Text = "Finalize All";
                    hlSettings.ClientSideEvents.Click = "function(s, e) { TimeBill.Scrub.FinalizeAll(); }";
                }).Render();

                ViewContext.Writer.Write("</td></tr></table>");

                ViewContext.Writer.Write("</div>");

                var matrix = ViewBag.HoursMatrix as AABC.DomainServices.Hours.PeriodMatrixByCase;

                ViewContext.Writer.Write("<div style='float: right; font-size: 0.85em; margin-top: 5px;'><em>(Total Hours, Payable, Billable)</em> &nbsp;&nbsp ");
                ViewContext.Writer.Write("<span style='font-weight: 600'>BCBA:</span> " + matrix.BCBAHours.Total + "|" + matrix.BCBAHours.Payable + "|" + matrix.BCBAHours.Billable);
                ViewContext.Writer.Write(" <span style='font-weight: 600'>Aide:</span> " + matrix.AideHours.Total + " | " + matrix.AideHours.Payable + " | " + matrix.AideHours.Billable);
                ViewContext.Writer.Write(" <span style='font-weight: 600'>Total:</span> " + matrix.AllHours.Total + "|" + matrix.AllHours.Payable + "|" + matrix.AllHours.Billable + "</div> ");

            }
                );

        //s.SetStatusBarTemplateContent(
        //    c => {

        //        ViewContext.Writer.Write("<div style='text-align: right'>");

        //        ViewContext.Writer.Write("<div style='float:left; font-style: italic; font-size: 0.9em;'></div>");

        //        Html.DevExpress().HyperLink(hlSettings => {
        //            hlSettings.Name = "hlAddNew";
        //            hlSettings.Properties.Text = "Add New";
        //            //hlSettings.Properties.ClientSideEvents.Click = "function(s, e) { TimeBill.Scrub.AddNew(); }";
        //            hlSettings.Properties.ClientSideEvents.Click = "function(s, e) { window.aabc.showHoursEntry(); }";
        //        }).Render();
        //        ViewContext.Writer.Write(" | ");

        //        Html.DevExpress().HyperLink(hlSettings => {
        //            hlSettings.Name = "hlFinalizeAll";
        //            hlSettings.Properties.Text = "Finalize All";
        //            hlSettings.Properties.ClientSideEvents.Click = "function(s, e) { TimeBill.Scrub.FinalizeAll(); }";
        //        }).Render();
        //        ViewContext.Writer.Write(" | ");

        //        ViewContext.Writer.Write("</div>");

        //    }
        //);

        s.HtmlRowPrepared = (settings, e) => {
            string statusCode = e.GetValue("StatusCode") as string;
            if (statusCode == "F") {
                e.Row.ForeColor = System.Drawing.Color.DarkGray;
            }
            if (statusCode == "P") {
                e.Row.ForeColor = System.Drawing.Color.DarkSlateGray;
            }
            var preCheckedNoSession = e.GetValue("PreCheckedNoSession") as Boolean? ?? false;
            if (preCheckedNoSession)
                e.Row.BackColor = System.Drawing.Color.FromArgb(0,255,229,229);
        };

    }
).Bind(Model).GetHtml()