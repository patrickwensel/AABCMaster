@model IEnumerable<AABC.DomainServices.Notes.NoteTaskDTO>

@Html.DevExpress().GridView(s => {
    s.Name = "TaskUserDashboardTodoGrid";
    s.KeyFieldName = "ID";
    s.Width = Unit.Percentage(100);
    s.Height = Unit.Percentage(100);
    s.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
    s.Settings.ShowTitlePanel = false;
    s.SettingsPager.PageSize = 200;
    s.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;
    s.SettingsBehavior.AllowSort = true;
    s.SettingsBehavior.AllowGroup = false;
    s.SettingsBehavior.AllowFocusedRow = true;
    s.SettingsBehavior.AllowSelectSingleRowOnly = false;

    // cell/row double click (http://kb.dymeng.com/kb/DevExMVCGridView)
    s.HtmlDataCellPrepared = (sender, e) =>
    {
        var grid = (DevExpress.Web.Mvc.MVCxGridView)sender;
        var data = grid.GetRow(e.VisibleIndex) as AABC.DomainServices.Notes.NoteTaskDTO;
        e.Cell.Attributes.Add("data-dym-cellClick", "TaskUserDashboardTodoGrid");
        e.Cell.Attributes.Add("data-dym-visibleIndex", e.VisibleIndex.ToString());
        e.Cell.Attributes.Add("data-dym-fieldName", e.DataColumn.FieldName);
        e.Cell.Attributes.Add("data-dym-sourceType", data.SourceType.ToString());
    };
    s.Columns.Add(col =>
    {
        col.Name = "SourceType";
        col.Caption = "Source";
        col.FieldName = "SourceType";
        col.Width = 90;
        col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        col.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Center;
    });
    s.Columns.Add(col=>
    {
        col.Name = "DueDate";
        col.Caption = "Due Date";
        col.FieldName = "DueDate";
        col.PropertiesEdit.DisplayFormatString = "d";
        col.Width = 90;
        col.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Center;
    });

    s.Columns.Add(col=>{
        col.Name = "PatientName";
        col.Width = 175;
        col.Caption = "Patient";
        col.FieldName = "PatientName";
        col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        col.HeaderStyle.HorizontalAlign = HorizontalAlign.Left;
    });

    s.Columns.Add(col=>{
        col.Name = "Description";
        col.Caption = "Description";
        col.FieldName = "Description";
        col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        col.HeaderStyle.HorizontalAlign = HorizontalAlign.Left;
    });

    s.Columns.Add(col=>{
        col.Name = "AssignedToName";
        col.Width = 175;
        col.Caption = "Assigned To";
        col.FieldName = "AssignedToName";
        col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        col.HeaderStyle.HorizontalAlign = HorizontalAlign.Left;
    });

    s.Columns.Add(col=>{
        col.Name = "Completed";
        col.Width = 90;
        col.Caption = "Completed";
        col.FieldName = "Completed";
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.UnboundType = DevExpress.Data.UnboundColumnType.Boolean;
        col.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
    });

    s.Columns.Add(col =>
    {
        col.EditFormSettings.Visible = DefaultBoolean.False;
        col.Settings.AllowAutoFilter = DefaultBoolean.False;
        col.Caption = "Actions";
        col.UnboundType = DevExpress.Data.UnboundColumnType.String;
        col.Width = 90;
        col.SetDataItemTemplateContent(c =>
        {
            string itemID = DataBinder.Eval(c.DataItem, "ID").ToString();
            var sourceType = (AABC.DomainServices.Notes.SourceType)DataBinder.Eval(c.DataItem, "SourceType");
            var parentID = DataBinder.Eval(c.DataItem, "ParentID").ToString();
            string url = string.Empty;
            if (sourceType == AABC.DomainServices.Notes.SourceType.Case)
            {
                url = Url.Action("Manage", "Case", new { CaseID = parentID });
            }
            else {
                url = Url.Action("Edit", "Referrals", new { id = parentID });
            }
            string button = Html.DevExpress().Button( b =>
            {
                b.Name = "pmButton" + itemID;
                b.Text = "View " + sourceType.ToString();
                b.ControlStyle.CssClass = "action-button";
                /*todo: change url based on sourceType*/
                b.ClientSideEvents.Click = "function(s, e) { window.location = '" + url + "';}";
            }).GetHtml().ToHtmlString();
            ViewContext.Writer.Write(button);
        });
    });
}).Bind(Model).GetHtml()
